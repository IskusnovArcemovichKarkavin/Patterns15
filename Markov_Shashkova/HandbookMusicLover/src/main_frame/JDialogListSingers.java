/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package main_frame;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.DefaultRowSorter;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import main_compare.DateCompare;
import main_compare.StringIntoIntegerCompare;
import main_сlasses.Man;
import main_сlasses.MusicIndustryWorker;
import main_сlasses.MusicalRecording;
import main_сlasses.Voice;

/**
 *
 * @author константин
 */
public class JDialogListSingers extends javax.swing.JDialog {

/**
 * Creates new form JDialogListSingers
 */
public JDialogListSingers(java.awt.Frame parent, boolean modal,ArrayList<MusicalRecording> music) {
    super(parent, modal);
    initComponents();
    this.music=music;
     this.getContentPane().setBackground(Color.white);
    this.initializeFields();
    this.changingComponents();
}
private void initializeFields()
{
   picture=Toolkit.getDefaultToolkit().getImage("program/155.jpg");
    this.pictureLabel=new ImageIcon("program/13.png");
   this.jLabelQuestion.setIcon(this.pictureLabel);
   this.number=new ArrayList<>();
   this.singers=new ArrayList<>();
   this.jPopupMenu1=new JPopupMenu();
}
private void changingComponents()
{
    DefaultTableCellRenderer r = (DefaultTableCellRenderer) this.jTableMusic.getDefaultRenderer(String.class);
    r.setHorizontalAlignment(JLabel.CENTER);
    r.setVerticalAlignment(JLabel.CENTER);
    r = (DefaultTableCellRenderer) this.jTableMusic.getTableHeader().getDefaultRenderer();
    r.setHorizontalAlignment(JLabel.CENTER);
    r.setVerticalAlignment(JLabel.CENTER);
    this.jTableMusic.getColumnModel().getColumn(0).setMinWidth(140);
    this.jTableMusic.getColumnModel().getColumn(0).setMaxWidth(140);
    this.jTableMusic.getColumnModel().getColumn(1).setMinWidth(140);
    this.jTableMusic.getColumnModel().getColumn(1).setMaxWidth(140);
    this.jTableMusic.getColumnModel().getColumn(5).setMinWidth(140);
    this.jTableMusic.getColumnModel().getColumn(5).setMaxWidth(140);
    DefaultRowSorter a= (DefaultRowSorter) this.jTableMusic.getRowSorter();
        a.setComparator(3,new DateCompare());
    a.setComparator(5, new StringIntoIntegerCompare());
}
/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMusic = new javax.swing.JTable();
        jButtonExit = new javax.swing.JButton();
        jLabelQuestion = new javax.swing.JLabel();
        jLabelListSinger = new javax.swing.JLabel();
        jLabelPoupMenu = new javax.swing.JLabel();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("main_frame/Bundle"); // NOI18N
        setTitle(bundle.getString("JDialogListSingers.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(1000, 700));
        setModal(true);
        setResizable(false);
        addWindowListener(formListener);
        getContentPane().setLayout(null);

        jTableMusic.setAutoCreateRowSorter(true);
        jTableMusic.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jTableMusic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Имя", "Фамилия", "Пол", "Дата рождения", "Голос", "кол. произведений"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableMusic.setFillsViewportHeight(true);
        jTableMusic.setGridColor(new java.awt.Color(51, 51, 51));
        jTableMusic.setRequestFocusEnabled(false);
        jTableMusic.setRowHeight(20);
        jTableMusic.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableMusic.getTableHeader().setResizingAllowed(false);
        jTableMusic.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableMusic);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(140, 70, 700, 370);

        jButtonExit.setBackground(new java.awt.Color(255, 255, 255));
        jButtonExit.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonExit.setText(bundle.getString("JDialogListSingers.jButtonExit.text")); // NOI18N
        jButtonExit.setToolTipText(bundle.getString("JDialogListSingers.jButtonExit.toolTipText")); // NOI18N
        jButtonExit.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        jButtonExit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonExit.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonExit.setFocusable(false);
        jButtonExit.setName("exit"); // NOI18N
        jButtonExit.setRolloverEnabled(false);
        jButtonExit.addMouseListener(formListener);
        jButtonExit.addActionListener(formListener);
        getContentPane().add(jButtonExit);
        jButtonExit.setBounds(330, 590, 320, 60);

        jLabelQuestion.setIcon(new javax.swing.ImageIcon("C:\\Users\\константин\\Documents\\NetBeansProjects\\13.png")); // NOI18N
        jLabelQuestion.setText(bundle.getString("JDialogListSingers.jLabelQuestion.text")); // NOI18N
        jLabelQuestion.addMouseListener(formListener);
        getContentPane().add(jLabelQuestion);
        jLabelQuestion.setBounds(490, 470, 34, 30);

        jLabelListSinger.setBackground(new java.awt.Color(255, 255, 255));
        jLabelListSinger.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelListSinger.setText(bundle.getString("JDialogListSingers.jLabelListSinger.text")); // NOI18N
        getContentPane().add(jLabelListSinger);
        jLabelListSinger.setBounds(400, 20, 200, 30);

        jLabelPoupMenu.setBackground(new java.awt.Color(255, 255, 255));
        jLabelPoupMenu.setText(bundle.getString("JDialogListSingers.jLabelPoupMenu.text")); // NOI18N
        getContentPane().add(jLabelPoupMenu);
        jLabelPoupMenu.setBounds(140, 440, 34, 14);

        pack();
        setLocationRelativeTo(null);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.MouseListener, java.awt.event.WindowListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == jButtonExit) {
                JDialogListSingers.this.jButtonExitActionPerformed(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == jButtonExit) {
                JDialogListSingers.this.jButtonExitMouseEntered(evt);
            }
            else if (evt.getSource() == jLabelQuestion) {
                JDialogListSingers.this.jLabelQuestionMouseEntered(evt);
            }
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == jButtonExit) {
                JDialogListSingers.this.jButtonExitMouseExited(evt);
            }
            else if (evt.getSource() == jLabelQuestion) {
                JDialogListSingers.this.jLabelQuestionMouseExited(evt);
            }
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }

        public void windowActivated(java.awt.event.WindowEvent evt) {
        }

        public void windowClosed(java.awt.event.WindowEvent evt) {
        }

        public void windowClosing(java.awt.event.WindowEvent evt) {
        }

        public void windowDeactivated(java.awt.event.WindowEvent evt) {
        }

        public void windowDeiconified(java.awt.event.WindowEvent evt) {
        }

        public void windowIconified(java.awt.event.WindowEvent evt) {
        }

        public void windowOpened(java.awt.event.WindowEvent evt) {
            if (evt.getSource() == JDialogListSingers.this) {
                JDialogListSingers.this.formWindowOpened(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonExitMouseEntered
        // TODO add your handling code here:
        jButtonExit.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonExitMouseEntered

    private void jButtonExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonExitMouseExited
        // TODO add your handling code here:
        jButtonExit.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonExitMouseExited

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        if(this.music.size()!=0)
        {
            this.createListSingers();
            this.fillTable();
        }
        this.repaint();
    }//GEN-LAST:event_formWindowOpened

    private void jLabelQuestionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelQuestionMouseExited
        // TODO add your handling code here:
        this.jPopupMenu1.setVisible(false);
    }//GEN-LAST:event_jLabelQuestionMouseExited

    private void jLabelQuestionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelQuestionMouseEntered
        // TODO add your handling code here:
        this.jPopupMenu1.removeAll();
        this.jPopupMenu1.add("Для сортировки по определенному полю нажмите заголовок соответствующего столбца.");
        this.jPopupMenu1.show(this.jLabelPoupMenu,0, 0);
    }//GEN-LAST:event_jLabelQuestionMouseEntered
protected void createListSingers()
{ 
   boolean k;
   int m=0;
    for(MusicalRecording v : music)
    {
        for(int i=0;i<v.sizeListSingers();i++)
        {
            k=false;
            for(int j=0;j<this.singers.size();j++)
            {
                if(this.singers.get(j).equalsMusicIndustryWorker(v.getSinger(i))==true)
                {
                    k=true;
                    m=j;
                    break;
                }
            }
            if(k==false)
            {
                this.singers.add(v.getSinger(i));
                this.number.add(1);
            }
            else
            {
                this.number.set(m, this.number.get(m)+1);
            }
        }
    }
}
protected void fillTable()
{
    String[] str=new String[6]; 
    DefaultTableModel table=(DefaultTableModel) this.jTableMusic.getModel();
    for(int i=0;i<this.singers.size();i++)
    {
        str[0]=this.singers.get(i).getName();
        str[1]=this.singers.get(i).getSurname();
        if(new DateCompare().compare(this.singers.get(i).getDate(), "1.1.1")!=0)
            str[3]=this.singers.get(i).getDate();
        else
            str[3]=" ";
        if(this.singers.get(i).getSex()==Man.MAN)
        {
            str[2]="Мужской";
        }
        else
            str[2]="Женский";
        str[4]=this.russificationVoice(this.singers.get(i).getVoice());
        str[5]=this.number.get(i).toString();
        table.addRow(str);
    }
}
protected String russificationVoice(String voice)
{
    String str=null;
    if(voice.equalsIgnoreCase(Voice.BARITONE)==true)
    {
        str="Баритон";
    }
    else
    {
        if(voice.equalsIgnoreCase(Voice.BASS)==true)
        {
            str="Бас";
        }
        else
        {
            if(voice.equalsIgnoreCase(Voice.CONTRALTO)==true)
            {
                str="Контральто";
            }
            else
            {
                if(voice.equalsIgnoreCase(Voice.SOPRANO)==true)
                {
                    str="Сопрано";
                }
                else
                    str="Тенор";
            }
        }
    }
    return str;
}
    @Override
public void paint(Graphics g)
{
    g.drawImage(this.picture, 0, 25, this);
    this.paint_1();
}
@Override
public void update(Graphics g)
{
    g.drawImage(this.picture, 0, 25,this);
    this.update_1();
    
}
public void paint_1()
{
    for(int i=0;i<this.getContentPane().getComponentCount();i++)
    {
        this.getContentPane().getComponent(i).repaint();
    }
}
public void update_1()
{
    for(int i=0;i<this.getContentPane().getComponentCount();i++)
    {
        this.getContentPane().getComponent(i).update(this.getContentPane().getComponent(i).getGraphics());
    }
}
/**
 * @param args the command line arguments
 */

protected ArrayList<MusicalRecording> music;//пременная хранящая объект кторый получен из родительской формы
protected Image picture;//заставка
protected ArrayList<MusicIndustryWorker> singers;//список всех певцов
protected ArrayList<Integer> number;
protected JPopupMenu jPopupMenu1; 
protected ImageIcon pictureLabel;//картинка для надписи
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JLabel jLabelListSinger;
    private javax.swing.JLabel jLabelPoupMenu;
    private javax.swing.JLabel jLabelQuestion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMusic;
    // End of variables declaration//GEN-END:variables
}
