/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package main_frame;

import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import main_compare.DateCompare;
import main_сlasses.MusicIndustryWorker;
import main_сlasses.MusicalRecording;
import main_сlasses.SongInformation;
import main_сlasses.Voice;

/**
 *
 * @author константин
 */
public class JDialogAdd extends javax.swing.JDialog {

/**
 * Creates new form JDialogAdd
 */

public JDialogAdd(java.awt.Frame parent, boolean modal,MusicalRecording music, ArrayList<MusicIndustryWorker> people)
{
    super(parent, modal);
    initComponents();
    this.music=music;
    this.people=people;
    this.getContentPane().setBackground(Color.white);
    this.jComboBoxGenre.setBackground(Color.WHITE);
    this.initializeFields();
    this.changingComponents();
}
/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jFormattedTextFieldName = new javax.swing.JFormattedTextField();
        jFormattedTextFieldCreationDate = new javax.swing.JFormattedTextField();
        jLabelName = new javax.swing.JLabel();
        jButtonCancel = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jLabelCreationDate = new javax.swing.JLabel();
        jFormattedTextFielDateOfPerformance = new javax.swing.JFormattedTextField();
        jLabelDateOfPerformance = new javax.swing.JLabel();
        jComboBoxGenre = new javax.swing.JComboBox();
        jLabelGenre = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListSingers = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListComposers = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListPoets = new javax.swing.JList();
        jRadioButtonTenor = new javax.swing.JRadioButton();
        jRadioButtonBass = new javax.swing.JRadioButton();
        jRadioButtonBaritone = new javax.swing.JRadioButton();
        jRadioButtonSoprano = new javax.swing.JRadioButton();
        jRadioButtonContralto = new javax.swing.JRadioButton();
        jLabelVoice = new javax.swing.JLabel();
        jLabelListSingers = new javax.swing.JLabel();
        jButtonListComposersSelect = new javax.swing.JButton();
        jButtonListComposersChange = new javax.swing.JButton();
        jButtonListComposersAdd = new javax.swing.JButton();
        jButtonListComposersDelete = new javax.swing.JButton();
        jButtonListSingersAdd = new javax.swing.JButton();
        jButtonListSingersSelect = new javax.swing.JButton();
        jButtonListSingersChange = new javax.swing.JButton();
        jButtonListSingersDelete = new javax.swing.JButton();
        jButtonListPoetsAdd = new javax.swing.JButton();
        jButtonListPoetsSelect = new javax.swing.JButton();
        jButtonListPoetsChange = new javax.swing.JButton();
        jButtonListPoetsDelete = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("main_frame/Bundle"); // NOI18N
        setTitle(bundle.getString("JDialogAdd.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(1000, 700));
        setModal(true);
        setResizable(false);
        addWindowListener(formListener);
        getContentPane().setLayout(null);

        jFormattedTextFieldName.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)), bundle.getString("JDialogAdd.jFormattedTextFieldName.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP)); // NOI18N
        try {
            jFormattedTextFieldName.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("************************************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextFieldName.setAutoscrolls(false);
        jFormattedTextFieldName.addKeyListener(formListener);
        getContentPane().add(jFormattedTextFieldName);
        jFormattedTextFieldName.setBounds(330, 0, 340, 38);

        jFormattedTextFieldCreationDate.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)), bundle.getString("JDialogAdd.jFormattedTextFieldCreationDate.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP)); // NOI18N
        try {
            jFormattedTextFieldCreationDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("**********")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldCreationDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextFieldCreationDate.setAutoscrolls(false);
        jFormattedTextFieldCreationDate.setInheritsPopupMenu(true);
        jFormattedTextFieldCreationDate.addKeyListener(formListener);
        getContentPane().add(jFormattedTextFieldCreationDate);
        jFormattedTextFieldCreationDate.setBounds(330, 70, 340, 38);

        jLabelName.setBackground(new java.awt.Color(255, 255, 255));
        jLabelName.setText(bundle.getString("JDialogAdd.jLabelName.text")); // NOI18N
        jLabelName.addMouseListener(formListener);
        getContentPane().add(jLabelName);
        jLabelName.setBounds(670, 10, 20, 30);

        jButtonCancel.setBackground(new java.awt.Color(255, 255, 255));
        jButtonCancel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonCancel.setText(bundle.getString("JDialogAdd.jButtonCancel.text")); // NOI18N
        jButtonCancel.setToolTipText(bundle.getString("JDialogAdd.jButtonCancel.toolTipText")); // NOI18N
        jButtonCancel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jButtonCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonCancel.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonCancel.setFocusable(false);
        jButtonCancel.setName("exit"); // NOI18N
        jButtonCancel.setRolloverEnabled(false);
        jButtonCancel.addMouseListener(formListener);
        jButtonCancel.addActionListener(formListener);
        getContentPane().add(jButtonCancel);
        jButtonCancel.setBounds(620, 620, 160, 50);

        jButtonAdd.setBackground(new java.awt.Color(255, 255, 255));
        jButtonAdd.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonAdd.setText(bundle.getString("JDialogAdd.jButtonAdd.text")); // NOI18N
        jButtonAdd.setToolTipText(bundle.getString("JDialogAdd.jButtonAdd.toolTipText")); // NOI18N
        jButtonAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jButtonAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonAdd.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonAdd.setFocusable(false);
        jButtonAdd.setName("exit"); // NOI18N
        jButtonAdd.setRolloverEnabled(false);
        jButtonAdd.addMouseListener(formListener);
        jButtonAdd.addActionListener(formListener);
        getContentPane().add(jButtonAdd);
        jButtonAdd.setBounds(320, 620, 160, 50);

        jLabelCreationDate.setBackground(new java.awt.Color(255, 255, 255));
        jLabelCreationDate.setText(bundle.getString("JDialogAdd.jLabelCreationDate.text")); // NOI18N
        jLabelCreationDate.addMouseListener(formListener);
        getContentPane().add(jLabelCreationDate);
        jLabelCreationDate.setBounds(670, 80, 80, 30);

        jFormattedTextFielDateOfPerformance.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)), bundle.getString("JDialogAdd.jFormattedTextFielDateOfPerformance.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP)); // NOI18N
        try {
            jFormattedTextFielDateOfPerformance.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("**********")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFielDateOfPerformance.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextFielDateOfPerformance.setAutoscrolls(false);
        jFormattedTextFielDateOfPerformance.setInheritsPopupMenu(true);
        jFormattedTextFielDateOfPerformance.addKeyListener(formListener);
        getContentPane().add(jFormattedTextFielDateOfPerformance);
        jFormattedTextFielDateOfPerformance.setBounds(330, 170, 340, 38);
        jFormattedTextFielDateOfPerformance.getAccessibleContext().setAccessibleName(bundle.getString("JDialogAdd.jFormattedTextFielDateOfPerformance.AccessibleContext.accessibleName")); // NOI18N

        jLabelDateOfPerformance.setBackground(new java.awt.Color(255, 255, 255));
        jLabelDateOfPerformance.setText(bundle.getString("JDialogAdd.jLabelDateOfPerformance.text")); // NOI18N
        jLabelDateOfPerformance.addMouseListener(formListener);
        getContentPane().add(jLabelDateOfPerformance);
        jLabelDateOfPerformance.setBounds(670, 180, 80, 30);

        jComboBoxGenre.setBackground(new java.awt.Color(233, 233, 244));
        jComboBoxGenre.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Рок", "Поп", "Джаз", "Классика" }));
        jComboBoxGenre.setToolTipText(bundle.getString("JDialogAdd.jComboBoxGenre.toolTipText")); // NOI18N
        jComboBoxGenre.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)), bundle.getString("JDialogAdd.jComboBoxGenre.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP)); // NOI18N
        jComboBoxGenre.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jComboBoxGenre.addActionListener(formListener);
        getContentPane().add(jComboBoxGenre);
        jComboBoxGenre.setBounds(330, 110, 340, 50);

        jLabelGenre.setBackground(new java.awt.Color(255, 255, 255));
        jLabelGenre.setText(bundle.getString("JDialogAdd.jLabelGenre.text")); // NOI18N
        jLabelGenre.addMouseListener(formListener);
        getContentPane().add(jLabelGenre);
        jLabelGenre.setBounds(670, 130, 80, 30);

        jListSingers.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)), bundle.getString("JDialogAdd.jListSingers.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP)); // NOI18N
        jListSingers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jListSingers);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(320, 220, 350, 120);

        jListComposers.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)), bundle.getString("JDialogAdd.jListComposers.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP)); // NOI18N
        jListComposers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jListComposers);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(320, 480, 350, 120);

        jListPoets.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)), bundle.getString("JDialogAdd.jListPoets.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP)); // NOI18N
        jListPoets.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jListPoets);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(320, 350, 350, 120);

        jRadioButtonTenor.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButtonTenor.setText(bundle.getString("JDialogAdd.jRadioButtonTenor.text")); // NOI18N
        jRadioButtonTenor.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jRadioButtonTenor.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioButtonTenor.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jRadioButtonTenor.addActionListener(formListener);
        getContentPane().add(jRadioButtonTenor);
        jRadioButtonTenor.setBounds(700, 40, 60, 30);

        jRadioButtonBass.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButtonBass.setText(bundle.getString("JDialogAdd.jRadioButtonBass.text")); // NOI18N
        jRadioButtonBass.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jRadioButtonBass.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioButtonBass.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jRadioButtonBass.addActionListener(formListener);
        getContentPane().add(jRadioButtonBass);
        jRadioButtonBass.setBounds(470, 40, 60, 30);

        jRadioButtonBaritone.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButtonBaritone.setText(bundle.getString("JDialogAdd.jRadioButtonBaritone.text")); // NOI18N
        jRadioButtonBaritone.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jRadioButtonBaritone.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioButtonBaritone.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jRadioButtonBaritone.addActionListener(formListener);
        getContentPane().add(jRadioButtonBaritone);
        jRadioButtonBaritone.setBounds(530, 40, 80, 30);

        jRadioButtonSoprano.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButtonSoprano.setText(bundle.getString("JDialogAdd.jRadioButtonSoprano.text")); // NOI18N
        jRadioButtonSoprano.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jRadioButtonSoprano.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioButtonSoprano.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jRadioButtonSoprano.addActionListener(formListener);
        getContentPane().add(jRadioButtonSoprano);
        jRadioButtonSoprano.setBounds(760, 40, 70, 30);

        jRadioButtonContralto.setBackground(new java.awt.Color(255, 255, 255));
        jRadioButtonContralto.setText(bundle.getString("JDialogAdd.jRadioButtonContralto.text")); // NOI18N
        jRadioButtonContralto.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jRadioButtonContralto.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioButtonContralto.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jRadioButtonContralto.addActionListener(formListener);
        getContentPane().add(jRadioButtonContralto);
        jRadioButtonContralto.setBounds(610, 40, 90, 30);

        jLabelVoice.setBackground(new java.awt.Color(255, 255, 255));
        jLabelVoice.setText(bundle.getString("JDialogAdd.jLabelVoice.text")); // NOI18N
        getContentPane().add(jLabelVoice);
        jLabelVoice.setBounds(190, 40, 280, 30);

        jLabelListSingers.setBackground(new java.awt.Color(255, 255, 255));
        jLabelListSingers.setText(bundle.getString("JDialogAdd.jLabelListSingers.text")); // NOI18N
        jLabelListSingers.addMouseListener(formListener);
        getContentPane().add(jLabelListSingers);
        jLabelListSingers.setBounds(300, 260, 80, 30);

        jButtonListComposersSelect.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListComposersSelect.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListComposersSelect.setText(bundle.getString("JDialogAdd.jButtonListComposersSelect.text")); // NOI18N
        jButtonListComposersSelect.setToolTipText(bundle.getString("JDialogAdd.jButtonListComposersSelect.toolTipText")); // NOI18N
        jButtonListComposersSelect.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListComposersSelect.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListComposersSelect.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListComposersSelect.setFocusable(false);
        jButtonListComposersSelect.setName("exit"); // NOI18N
        jButtonListComposersSelect.setRolloverEnabled(false);
        jButtonListComposersSelect.addMouseListener(formListener);
        jButtonListComposersSelect.addActionListener(formListener);
        getContentPane().add(jButtonListComposersSelect);
        jButtonListComposersSelect.setBounds(670, 510, 110, 30);

        jButtonListComposersChange.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListComposersChange.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListComposersChange.setText(bundle.getString("JDialogAdd.jButtonListComposersChange.text")); // NOI18N
        jButtonListComposersChange.setToolTipText(bundle.getString("JDialogAdd.jButtonListComposersChange.toolTipText")); // NOI18N
        jButtonListComposersChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListComposersChange.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListComposersChange.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListComposersChange.setFocusable(false);
        jButtonListComposersChange.setName("exit"); // NOI18N
        jButtonListComposersChange.setRolloverEnabled(false);
        jButtonListComposersChange.addMouseListener(formListener);
        jButtonListComposersChange.addActionListener(formListener);
        getContentPane().add(jButtonListComposersChange);
        jButtonListComposersChange.setBounds(670, 540, 110, 30);

        jButtonListComposersAdd.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListComposersAdd.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListComposersAdd.setText(bundle.getString("JDialogAdd.jButtonListComposersAdd.text")); // NOI18N
        jButtonListComposersAdd.setToolTipText(bundle.getString("JDialogAdd.jButtonListComposersAdd.toolTipText")); // NOI18N
        jButtonListComposersAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListComposersAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListComposersAdd.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListComposersAdd.setFocusable(false);
        jButtonListComposersAdd.setName("exit"); // NOI18N
        jButtonListComposersAdd.setRolloverEnabled(false);
        jButtonListComposersAdd.addMouseListener(formListener);
        jButtonListComposersAdd.addActionListener(formListener);
        getContentPane().add(jButtonListComposersAdd);
        jButtonListComposersAdd.setBounds(670, 480, 110, 30);

        jButtonListComposersDelete.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListComposersDelete.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListComposersDelete.setText(bundle.getString("JDialogAdd.jButtonListComposersDelete.text")); // NOI18N
        jButtonListComposersDelete.setToolTipText(bundle.getString("JDialogAdd.jButtonListComposersDelete.toolTipText")); // NOI18N
        jButtonListComposersDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListComposersDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListComposersDelete.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListComposersDelete.setFocusable(false);
        jButtonListComposersDelete.setName("exit"); // NOI18N
        jButtonListComposersDelete.setRolloverEnabled(false);
        jButtonListComposersDelete.addMouseListener(formListener);
        jButtonListComposersDelete.addActionListener(formListener);
        getContentPane().add(jButtonListComposersDelete);
        jButtonListComposersDelete.setBounds(670, 570, 110, 30);

        jButtonListSingersAdd.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListSingersAdd.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListSingersAdd.setText(bundle.getString("JDialogAdd.jButtonListSingersAdd.text")); // NOI18N
        jButtonListSingersAdd.setToolTipText(bundle.getString("JDialogAdd.jButtonListSingersAdd.toolTipText")); // NOI18N
        jButtonListSingersAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListSingersAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListSingersAdd.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListSingersAdd.setFocusable(false);
        jButtonListSingersAdd.setName("exit"); // NOI18N
        jButtonListSingersAdd.setRolloverEnabled(false);
        jButtonListSingersAdd.addMouseListener(formListener);
        jButtonListSingersAdd.addActionListener(formListener);
        getContentPane().add(jButtonListSingersAdd);
        jButtonListSingersAdd.setBounds(670, 220, 110, 30);

        jButtonListSingersSelect.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListSingersSelect.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListSingersSelect.setText(bundle.getString("JDialogAdd.jButtonListSingersSelect.text")); // NOI18N
        jButtonListSingersSelect.setToolTipText(bundle.getString("JDialogAdd.jButtonListSingersSelect.toolTipText")); // NOI18N
        jButtonListSingersSelect.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListSingersSelect.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListSingersSelect.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListSingersSelect.setFocusable(false);
        jButtonListSingersSelect.setName("exit"); // NOI18N
        jButtonListSingersSelect.setRolloverEnabled(false);
        jButtonListSingersSelect.addMouseListener(formListener);
        jButtonListSingersSelect.addActionListener(formListener);
        getContentPane().add(jButtonListSingersSelect);
        jButtonListSingersSelect.setBounds(670, 250, 110, 30);

        jButtonListSingersChange.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListSingersChange.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListSingersChange.setText(bundle.getString("JDialogAdd.jButtonListSingersChange.text")); // NOI18N
        jButtonListSingersChange.setToolTipText(bundle.getString("JDialogAdd.jButtonListSingersChange.toolTipText")); // NOI18N
        jButtonListSingersChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListSingersChange.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListSingersChange.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListSingersChange.setFocusable(false);
        jButtonListSingersChange.setName("exit"); // NOI18N
        jButtonListSingersChange.setRolloverEnabled(false);
        jButtonListSingersChange.addMouseListener(formListener);
        jButtonListSingersChange.addActionListener(formListener);
        getContentPane().add(jButtonListSingersChange);
        jButtonListSingersChange.setBounds(670, 280, 110, 30);

        jButtonListSingersDelete.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListSingersDelete.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListSingersDelete.setText(bundle.getString("JDialogAdd.jButtonListSingersDelete.text")); // NOI18N
        jButtonListSingersDelete.setToolTipText(bundle.getString("JDialogAdd.jButtonListSingersDelete.toolTipText")); // NOI18N
        jButtonListSingersDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListSingersDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListSingersDelete.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListSingersDelete.setFocusable(false);
        jButtonListSingersDelete.setName("exit"); // NOI18N
        jButtonListSingersDelete.setRolloverEnabled(false);
        jButtonListSingersDelete.addMouseListener(formListener);
        jButtonListSingersDelete.addActionListener(formListener);
        getContentPane().add(jButtonListSingersDelete);
        jButtonListSingersDelete.setBounds(670, 310, 110, 30);

        jButtonListPoetsAdd.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListPoetsAdd.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListPoetsAdd.setText(bundle.getString("JDialogAdd.jButtonListPoetsAdd.text")); // NOI18N
        jButtonListPoetsAdd.setToolTipText(bundle.getString("JDialogAdd.jButtonListPoetsAdd.toolTipText")); // NOI18N
        jButtonListPoetsAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListPoetsAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListPoetsAdd.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListPoetsAdd.setFocusable(false);
        jButtonListPoetsAdd.setName("exit"); // NOI18N
        jButtonListPoetsAdd.setRolloverEnabled(false);
        jButtonListPoetsAdd.addMouseListener(formListener);
        jButtonListPoetsAdd.addActionListener(formListener);
        getContentPane().add(jButtonListPoetsAdd);
        jButtonListPoetsAdd.setBounds(670, 350, 110, 30);

        jButtonListPoetsSelect.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListPoetsSelect.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListPoetsSelect.setText(bundle.getString("JDialogAdd.jButtonListPoetsSelect.text")); // NOI18N
        jButtonListPoetsSelect.setToolTipText(bundle.getString("JDialogAdd.jButtonListPoetsSelect.toolTipText")); // NOI18N
        jButtonListPoetsSelect.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListPoetsSelect.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListPoetsSelect.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListPoetsSelect.setFocusable(false);
        jButtonListPoetsSelect.setName("exit"); // NOI18N
        jButtonListPoetsSelect.setRolloverEnabled(false);
        jButtonListPoetsSelect.addMouseListener(formListener);
        jButtonListPoetsSelect.addActionListener(formListener);
        getContentPane().add(jButtonListPoetsSelect);
        jButtonListPoetsSelect.setBounds(670, 380, 110, 30);

        jButtonListPoetsChange.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListPoetsChange.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListPoetsChange.setText(bundle.getString("JDialogAdd.jButtonListPoetsChange.text")); // NOI18N
        jButtonListPoetsChange.setToolTipText(bundle.getString("JDialogAdd.jButtonListPoetsChange.toolTipText")); // NOI18N
        jButtonListPoetsChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListPoetsChange.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListPoetsChange.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListPoetsChange.setFocusable(false);
        jButtonListPoetsChange.setName("exit"); // NOI18N
        jButtonListPoetsChange.setRolloverEnabled(false);
        jButtonListPoetsChange.addMouseListener(formListener);
        jButtonListPoetsChange.addActionListener(formListener);
        getContentPane().add(jButtonListPoetsChange);
        jButtonListPoetsChange.setBounds(670, 410, 110, 30);

        jButtonListPoetsDelete.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListPoetsDelete.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButtonListPoetsDelete.setText(bundle.getString("JDialogAdd.jButtonListPoetsDelete.text")); // NOI18N
        jButtonListPoetsDelete.setToolTipText(bundle.getString("JDialogAdd.jButtonListPoetsDelete.toolTipText")); // NOI18N
        jButtonListPoetsDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
        jButtonListPoetsDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListPoetsDelete.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListPoetsDelete.setFocusable(false);
        jButtonListPoetsDelete.setName("exit"); // NOI18N
        jButtonListPoetsDelete.setRolloverEnabled(false);
        jButtonListPoetsDelete.addMouseListener(formListener);
        jButtonListPoetsDelete.addActionListener(formListener);
        getContentPane().add(jButtonListPoetsDelete);
        jButtonListPoetsDelete.setBounds(670, 440, 110, 30);

        pack();
        setLocationRelativeTo(null);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.KeyListener, java.awt.event.MouseListener, java.awt.event.WindowListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == jButtonCancel) {
                JDialogAdd.this.jButtonCancelActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonAdd) {
                JDialogAdd.this.jButtonAddActionPerformed(evt);
            }
            else if (evt.getSource() == jComboBoxGenre) {
                JDialogAdd.this.jComboBoxGenreActionPerformed(evt);
            }
            else if (evt.getSource() == jRadioButtonTenor) {
                JDialogAdd.this.jRadioButtonTenorActionPerformed(evt);
            }
            else if (evt.getSource() == jRadioButtonBass) {
                JDialogAdd.this.jRadioButtonBassActionPerformed(evt);
            }
            else if (evt.getSource() == jRadioButtonBaritone) {
                JDialogAdd.this.jRadioButtonBaritoneActionPerformed(evt);
            }
            else if (evt.getSource() == jRadioButtonSoprano) {
                JDialogAdd.this.jRadioButtonSopranoActionPerformed(evt);
            }
            else if (evt.getSource() == jRadioButtonContralto) {
                JDialogAdd.this.jRadioButtonContraltoActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListComposersSelect) {
                JDialogAdd.this.jButtonListComposersSelectActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListComposersChange) {
                JDialogAdd.this.jButtonListComposersChangeActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListComposersAdd) {
                JDialogAdd.this.jButtonListComposersAddActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListComposersDelete) {
                JDialogAdd.this.jButtonListComposersDeleteActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListSingersAdd) {
                JDialogAdd.this.jButtonListSingersAddActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListSingersSelect) {
                JDialogAdd.this.jButtonListSingersSelectActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListSingersChange) {
                JDialogAdd.this.jButtonListSingersChangeActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListSingersDelete) {
                JDialogAdd.this.jButtonListSingersDeleteActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListPoetsAdd) {
                JDialogAdd.this.jButtonListPoetsAddActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListPoetsSelect) {
                JDialogAdd.this.jButtonListPoetsSelectActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListPoetsChange) {
                JDialogAdd.this.jButtonListPoetsChangeActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListPoetsDelete) {
                JDialogAdd.this.jButtonListPoetsDeleteActionPerformed(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == jFormattedTextFieldName) {
                JDialogAdd.this.jFormattedTextFieldNameKeyReleased(evt);
            }
            else if (evt.getSource() == jFormattedTextFieldCreationDate) {
                JDialogAdd.this.jFormattedTextFieldCreationDateKeyReleased(evt);
            }
            else if (evt.getSource() == jFormattedTextFielDateOfPerformance) {
                JDialogAdd.this.jFormattedTextFielDateOfPerformanceKeyReleased(evt);
            }
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == jLabelName) {
                JDialogAdd.this.jLabelNameMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonCancel) {
                JDialogAdd.this.jButtonCancelMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonAdd) {
                JDialogAdd.this.jButtonAddMouseEntered(evt);
            }
            else if (evt.getSource() == jLabelCreationDate) {
                JDialogAdd.this.jLabelCreationDateMouseEntered(evt);
            }
            else if (evt.getSource() == jLabelDateOfPerformance) {
                JDialogAdd.this.jLabelDateOfPerformanceMouseEntered(evt);
            }
            else if (evt.getSource() == jLabelGenre) {
                JDialogAdd.this.jLabelGenreMouseEntered(evt);
            }
            else if (evt.getSource() == jLabelListSingers) {
                JDialogAdd.this.jLabelListSingersMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListComposersSelect) {
                JDialogAdd.this.jButtonListComposersSelectMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListComposersChange) {
                JDialogAdd.this.jButtonListComposersChangeMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListComposersAdd) {
                JDialogAdd.this.jButtonListComposersAddMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListComposersDelete) {
                JDialogAdd.this.jButtonListComposersDeleteMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListSingersAdd) {
                JDialogAdd.this.jButtonListSingersAddMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListSingersSelect) {
                JDialogAdd.this.jButtonListSingersSelectMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListSingersChange) {
                JDialogAdd.this.jButtonListSingersChangeMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListSingersDelete) {
                JDialogAdd.this.jButtonListSingersDeleteMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListPoetsAdd) {
                JDialogAdd.this.jButtonListPoetsAddMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListPoetsSelect) {
                JDialogAdd.this.jButtonListPoetsSelectMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListPoetsChange) {
                JDialogAdd.this.jButtonListPoetsChangeMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListPoetsDelete) {
                JDialogAdd.this.jButtonListPoetsDeleteMouseEntered(evt);
            }
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == jLabelName) {
                JDialogAdd.this.jLabelNameMouseExited(evt);
            }
            else if (evt.getSource() == jButtonCancel) {
                JDialogAdd.this.jButtonCancelMouseExited(evt);
            }
            else if (evt.getSource() == jButtonAdd) {
                JDialogAdd.this.jButtonAddMouseExited(evt);
            }
            else if (evt.getSource() == jLabelCreationDate) {
                JDialogAdd.this.jLabelCreationDateMouseExited(evt);
            }
            else if (evt.getSource() == jLabelDateOfPerformance) {
                JDialogAdd.this.jLabelDateOfPerformanceMouseExited(evt);
            }
            else if (evt.getSource() == jLabelGenre) {
                JDialogAdd.this.jLabelGenreMouseExited(evt);
            }
            else if (evt.getSource() == jLabelListSingers) {
                JDialogAdd.this.jLabelListSingersMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListComposersSelect) {
                JDialogAdd.this.jButtonListComposersSelectMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListComposersChange) {
                JDialogAdd.this.jButtonListComposersChangeMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListComposersAdd) {
                JDialogAdd.this.jButtonListComposersAddMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListComposersDelete) {
                JDialogAdd.this.jButtonListComposersDeleteMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListSingersAdd) {
                JDialogAdd.this.jButtonListSingersAddMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListSingersSelect) {
                JDialogAdd.this.jButtonListSingersSelectMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListSingersChange) {
                JDialogAdd.this.jButtonListSingersChangeMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListSingersDelete) {
                JDialogAdd.this.jButtonListSingersDeleteMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListPoetsAdd) {
                JDialogAdd.this.jButtonListPoetsAddMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListPoetsSelect) {
                JDialogAdd.this.jButtonListPoetsSelectMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListPoetsChange) {
                JDialogAdd.this.jButtonListPoetsChangeMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListPoetsDelete) {
                JDialogAdd.this.jButtonListPoetsDeleteMouseExited(evt);
            }
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }

        public void windowActivated(java.awt.event.WindowEvent evt) {
        }

        public void windowClosed(java.awt.event.WindowEvent evt) {
        }

        public void windowClosing(java.awt.event.WindowEvent evt) {
        }

        public void windowDeactivated(java.awt.event.WindowEvent evt) {
        }

        public void windowDeiconified(java.awt.event.WindowEvent evt) {
        }

        public void windowIconified(java.awt.event.WindowEvent evt) {
        }

        public void windowOpened(java.awt.event.WindowEvent evt) {
            if (evt.getSource() == JDialogAdd.this) {
                JDialogAdd.this.formWindowOpened(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents
private void changingComponents()
{
    this.jListSingers.setModel(this.listModelSingers);
    this.jListComposers.setModel(this.listModelComposers);
    this.jListPoets.setModel(this.listModelPoets);
}
private void initializeFields()
{
    this.listModelSingers=new DefaultListModel();
    this.listModelPoets=new DefaultListModel();
    this.listModelComposers=new DefaultListModel();
    this.voice=new Voice();
    picture=Toolkit.getDefaultToolkit().getImage("program/144.jpg");
    this.pictureLabel=new ImageIcon("program/3.png");
   this.jLabelGenre.setIcon(this.pictureLabel);
   this.jLabelCreationDate.setIcon(this.pictureLabel);
   this.jLabelDateOfPerformance.setIcon(this.pictureLabel);
   this.jLabelName.setIcon(this.pictureLabel);
   this.jLabelListSingers.setIcon(this.pictureLabel);
    this.listArraySingers=new ArrayList<>();
}
    private void jFormattedTextFieldNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextFieldNameKeyReleased
        // TODO add your handling code here:
        if(this.jFormattedTextFieldName.getText().trim().equalsIgnoreCase("")==false)
        {
            this.songAdd.setName(this.jFormattedTextFieldName.getText().trim());
            if(this.name==false)
            {
                this.jLabelName.setEnabled(false);
                this.jLabelName.setVisible(false);
                this.name=true;
                this.checkAllValues();
            }
        }
        else
        {
            if(this.name==true)
            {
                this.jLabelName.setEnabled(true);
                this.jLabelName.setVisible(true);
                this.name=false;
                this.checkAllValues();
            }
        }
    }//GEN-LAST:event_jFormattedTextFieldNameKeyReleased

    private void jFormattedTextFieldCreationDateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextFieldCreationDateKeyReleased
  
        boolean a=false;
        try {
        // TODO add your handling code here:
             this.songAdd.setCreationDate(this.jFormattedTextFieldCreationDate.getText().trim());
            if(this.creationDate==false)
            {
                this.jLabelCreationDate.setEnabled(false);
                this.jLabelCreationDate.setVisible(false);
                this.creationDate=true;
                this.checkAllValues();
            }
            if(new DateCompare().compare(this.songAdd.getCreationDate(), this.jFormattedTextFieldCreationDate.getText().trim())!=0)
                this.jFormattedTextFieldCreationDate.setText(this.songAdd.getCreationDate());
        } catch (ParseException ex) {
              a=true;
        } catch (IllegalArgumentException ex) {
              a=true;
        }
        
        if(a==true)
        {
           try {
               this.songAdd.setCreationDate("1.1.1");
                if(this.creationDate==true&&this.jFormattedTextFieldCreationDate.getText().trim().equalsIgnoreCase("")!=true)
                {
                    this.jLabelCreationDate.setEnabled(true);
                    this.jLabelCreationDate.setVisible(true);
                    this.creationDate=false;
                    this.checkAllValues();
                }
                else
                {
                    if(this.jFormattedTextFieldCreationDate.getText().trim().equalsIgnoreCase("")==true)
                    {
                        this.jLabelCreationDate.setEnabled(false);
                        this.jLabelCreationDate.setVisible(false);
                        this.creationDate=true;
                        this.checkAllValues();
                    }
                }
            } catch (ParseException ex) {
            } catch (IllegalArgumentException ex) {
            }
        }

    }//GEN-LAST:event_jFormattedTextFieldCreationDateKeyReleased

    private void jLabelNameMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelNameMouseEntered
        // TODO add your handling code here:
        this.jPopupMenu1.removeAll();
        this.jPopupMenu1.add("Поле не может быть пустым.");
        this.jPopupMenu1.show(this.jFormattedTextFieldName,0, 12);
    }//GEN-LAST:event_jLabelNameMouseEntered

    private void jLabelNameMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelNameMouseExited
        // TODO add your handling code here:
          this.jPopupMenu1.setVisible(false);
    }//GEN-LAST:event_jLabelNameMouseExited

    private void jButtonCancelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCancelMouseEntered
        // TODO add your handling code here:
        this.jButtonCancel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonCancelMouseEntered

    private void jButtonCancelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCancelMouseExited
        // TODO add your handling code here:
        jButtonCancel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonCancelMouseExited

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMouseEntered
        // TODO add your handling code here:
        this.jButtonAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonAddMouseEntered

    private void jButtonAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMouseExited
        // TODO add your handling code here:
          this.jButtonAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonAddMouseExited

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
        while(this.music.sizeListSingers()!=0)
        {
            this.music.removeListSingers(0);
        }
            this.music.setSong(this.songAdd);
            try {
                this.music.setDateOfPerformance(this.musicAdd.getDateOfPerformance());
            } catch (ParseException ex) {
            } catch (IllegalArgumentException ex) {
            }
            for(int i=0;i<this.musicAdd.sizeListSingers();i++)
            {
                this.music.addListSinger(this.musicAdd.getSinger(i));
            }
        this.setVisible(false);
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jLabelCreationDateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCreationDateMouseEntered
        // TODO add your handling code here:
        this.jPopupMenu1.removeAll();
        this.jPopupMenu1.add("Дата неправильно введена.");
        this.jPopupMenu1.show(this.jFormattedTextFieldCreationDate,0, 12);
    }//GEN-LAST:event_jLabelCreationDateMouseEntered

    private void jLabelCreationDateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCreationDateMouseExited
        // TODO add your handling code here:
        this.jPopupMenu1.setVisible(false);
    }//GEN-LAST:event_jLabelCreationDateMouseExited

    private void jFormattedTextFielDateOfPerformanceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextFielDateOfPerformanceKeyReleased
        // TODO add your handling code here:
         boolean a=false;
        try {
        // TODO add your handling code here:
             this.musicAdd.setDateOfPerformance(this.jFormattedTextFielDateOfPerformance.getText().trim());
                if(this.dateOfPerformance==false)
                {
                    this.jLabelDateOfPerformance.setEnabled(false);
                    this.jLabelDateOfPerformance.setVisible(false);
                    this.dateOfPerformance=true;
                    this.checkAllValues();
                }
            if(new DateCompare().compare(this.musicAdd.getDateOfPerformance(), this.jFormattedTextFielDateOfPerformance.getText().trim())!=0)
                this.jFormattedTextFielDateOfPerformance.setText(this.musicAdd.getDateOfPerformance());
        } catch (ParseException ex) {
              a=true;
        } catch (IllegalArgumentException ex) {
              a=true;
        }
        
        if(a==true)
        {
           try {
               this.musicAdd.setDateOfPerformance("1.1.1");
                if(this.dateOfPerformance==true&&this.jFormattedTextFielDateOfPerformance.getText().trim().equalsIgnoreCase("")!=true)
                {
                    this.jLabelDateOfPerformance.setEnabled(true);
                    this.jLabelDateOfPerformance.setVisible(true);
                    this.dateOfPerformance=false;
                    this.checkAllValues();
                }
                else
                {
                    if(this.jFormattedTextFielDateOfPerformance.getText().trim().equalsIgnoreCase("")==true)
                    {
                        this.jLabelDateOfPerformance.setEnabled(false);
                        this.jLabelDateOfPerformance.setVisible(false);
                        this.dateOfPerformance=true;
                        this.checkAllValues();
                    }
                }
            } catch (ParseException ex) {
            } catch (IllegalArgumentException ex) {
            }
        }
    }//GEN-LAST:event_jFormattedTextFielDateOfPerformanceKeyReleased

    private void jLabelDateOfPerformanceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDateOfPerformanceMouseEntered
        // TODO add your handling code here:
        this.jPopupMenu1.removeAll();
            this.jPopupMenu1.add("Дата неправильно введена.");
        this.jPopupMenu1.show(this.jFormattedTextFielDateOfPerformance,0, 12);
    }//GEN-LAST:event_jLabelDateOfPerformanceMouseEntered

    private void jLabelDateOfPerformanceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDateOfPerformanceMouseExited
        // TODO add your handling code here:
        this.jPopupMenu1.setVisible(false);
    }//GEN-LAST:event_jLabelDateOfPerformanceMouseExited

    private void jComboBoxGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxGenreActionPerformed
        // TODO add your handling code here:
        boolean f=true;
        String s=this.jComboBoxGenre.getSelectedItem().toString();
        if(s.equalsIgnoreCase("Рок".trim())==true)
        {
            this.songAdd.setGenre(SongInformation.ROCK);
        }
        else
        {
            if(s.equalsIgnoreCase("Поп".trim()))
            {
                this.songAdd.setGenre(SongInformation.POP);
            }
            else
            {
                if(s.equalsIgnoreCase("Джаз".trim()))
                {
                    this.songAdd.setGenre(SongInformation.JAZZ);
                }
                else
                {
                    if(s.equalsIgnoreCase("Классика".trim()))
                    {
                        try{
                            this.songAdd.setGenre(SongInformation.CLASSIC);
                        }
                        catch (IllegalArgumentException ex) {
                            this.genre=false;
                            this.jLabelGenre.setEnabled(true);
                            this.jLabelGenre.setVisible(true);
                            this.checkAllValues();
                            f=false;
                        }
                    }
                }
            }
        }
        if(f==true&&this.genre==false)
        {
           this.genre=true;
           this.jLabelGenre.setEnabled(false);
           this.jLabelGenre.setVisible(false);
           this.checkAllValues(); 
        }
    }//GEN-LAST:event_jComboBoxGenreActionPerformed

    private void jLabelGenreMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelGenreMouseEntered
        // TODO add your handling code here:
        this.jPopupMenu1.removeAll();
        this.jPopupMenu1.add("Для классической музыки должны быть выбраны требования к голосам исполнителей");
        this.jPopupMenu1.show(this.jComboBoxGenre,0, 18);
    }//GEN-LAST:event_jLabelGenreMouseEntered

    private void jLabelGenreMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelGenreMouseExited
        // TODO add your handling code here:
        this.jPopupMenu1.setVisible(false);
    }//GEN-LAST:event_jLabelGenreMouseExited

    private void jRadioButtonBassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonBassActionPerformed
        // TODO add your handling code here:
       if(this.jRadioButtonBass.isSelected()==true)
       {
           this.voice.setBass(true);
           this.songAdd.setRequirementVoice(this.voice);
           if(this.genre==false)
           {
               this.genre=true;
               this.jLabelGenre.setEnabled(false);
               this.jLabelGenre.setVisible(false);
               this.checkAllValues(); 
               this.songAdd.setGenre(SongInformation.CLASSIC);
           }
       }
       else
       {
           this.voice.setBass(false);
           try
           {
               this.songAdd.setRequirementVoice(this.voice);
           }
           catch (IllegalArgumentException ex) {
               this.genre=false;
               this.jLabelGenre.setEnabled(true);
               this.jLabelGenre.setVisible(true);
               this.checkAllValues(); 
               this.songAdd.setGenre(SongInformation.ROCK);
               this.songAdd.setRequirementVoice(this.voice);
           }
       }
        this.checkSingers();
    }//GEN-LAST:event_jRadioButtonBassActionPerformed

    private void jRadioButtonBaritoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonBaritoneActionPerformed
        // TODO add your handling code here:
          if(this.jRadioButtonBaritone.isSelected()==true)
       {
           this.voice.setBaritone(true);
           this.songAdd.setRequirementVoice(this.voice);
           if(this.genre==false)
           {
               this.genre=true;
               this.jLabelGenre.setEnabled(false);
               this.jLabelGenre.setVisible(false);
               this.checkAllValues(); 
               this.songAdd.setGenre(SongInformation.CLASSIC);
           }
       }
       else
       {
           this.voice.setBaritone(false);
           try
           {
               this.songAdd.setRequirementVoice(this.voice);
           }
           catch (IllegalArgumentException ex) {
               this.genre=false;
               this.jLabelGenre.setEnabled(true);
               this.jLabelGenre.setVisible(true);
               this.checkAllValues(); 
               this.songAdd.setGenre(SongInformation.ROCK);
               this.songAdd.setRequirementVoice(this.voice);
           }
       }
        this.checkSingers();
    }//GEN-LAST:event_jRadioButtonBaritoneActionPerformed

    private void jRadioButtonContraltoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonContraltoActionPerformed
        // TODO add your handling code here:
          if(this.jRadioButtonContralto.isSelected()==true)
       {
           this.voice.setContralto(true);
           this.songAdd.setRequirementVoice(this.voice);
           if(this.genre==false)
           {
               this.genre=true;
               this.jLabelGenre.setEnabled(false);
               this.jLabelGenre.setVisible(false);
               this.checkAllValues(); 
               this.songAdd.setGenre(SongInformation.CLASSIC);
           }
       }
       else
       {
           this.voice.setContralto(false);
           try
           {
               this.songAdd.setRequirementVoice(this.voice);
           }
           catch (IllegalArgumentException ex) {
               this.genre=false;
               this.jLabelGenre.setEnabled(true);
               this.jLabelGenre.setVisible(true);
               this.checkAllValues(); 
               this.songAdd.setGenre(SongInformation.ROCK);
               this.songAdd.setRequirementVoice(this.voice);
           }
       }
        this.checkSingers();
    }//GEN-LAST:event_jRadioButtonContraltoActionPerformed

    private void jRadioButtonTenorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonTenorActionPerformed
        // TODO add your handling code here:
          if(this.jRadioButtonTenor.isSelected()==true)
       {
           this.voice.setTenor(true);
           this.songAdd.setRequirementVoice(this.voice);
           if(this.genre==false)
           {
               this.genre=true;
               this.jLabelGenre.setEnabled(false);
               this.jLabelGenre.setVisible(false);
               this.checkAllValues(); 
               this.songAdd.setGenre(SongInformation.CLASSIC);
           }
       }
       else
       {
           this.voice.setTenor(false);
           try
           {
               this.songAdd.setRequirementVoice(this.voice);
           }
           catch (IllegalArgumentException ex) {
               this.genre=false;
               this.jLabelGenre.setEnabled(true);
               this.jLabelGenre.setVisible(true);
               this.checkAllValues(); 
               this.songAdd.setGenre(SongInformation.ROCK);
               this.songAdd.setRequirementVoice(this.voice);
           }
       }
        this.checkSingers();
    }//GEN-LAST:event_jRadioButtonTenorActionPerformed

    private void jRadioButtonSopranoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSopranoActionPerformed
        // TODO add your handling code here:
          if(this.jRadioButtonSoprano.isSelected()==true)
       {
           this.voice.setSoprano(true);
           this.songAdd.setRequirementVoice(this.voice);
           if(this.genre==false)
           {
               this.genre=true;
               this.jLabelGenre.setEnabled(false);
               this.jLabelGenre.setVisible(false);
               this.checkAllValues(); 
               this.songAdd.setGenre(SongInformation.CLASSIC);
           }
       }
       else
       {
           this.voice.setSoprano(false);
           try
           {
               this.songAdd.setRequirementVoice(this.voice);
           }
           catch (IllegalArgumentException ex) {
               this.genre=false;
               this.jLabelGenre.setEnabled(true);
               this.jLabelGenre.setVisible(true);
               this.checkAllValues(); 
               this.songAdd.setGenre(SongInformation.ROCK);
               this.songAdd.setRequirementVoice(this.voice);
           }
       }
       this.checkSingers();
    }//GEN-LAST:event_jRadioButtonSopranoActionPerformed
    protected void checkSingers()
    {
       if(this.listArraySingers.size()!=0)
        {
            if(this.checkSingers_2()==true)
            {
                if(this.listSingers==false)
                {
                    this.listSingers=true;
                    this.jLabelListSingers.setEnabled(false);
                    this.jLabelListSingers.setVisible(false);
                   this.checkAllValues();   
               }
            }
            else
            {
                 if(this.listSingers==true)
                {
                    this.listSingers=false;
                    this.jLabelListSingers.setEnabled(true);
                    this.jLabelListSingers.setVisible(true);
                    this.checkAllValues();   
                }
            }
        }
    }
    private void jLabelListSingersMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelListSingersMouseEntered
        // TODO add your handling code here:
        this.jPopupMenu1.removeAll();
        if(this.listArraySingers.size()==0)
            this.jPopupMenu1.add("Поле не может быть пустым. Добавьте исполнителей.");
        else
            this.jPopupMenu1.add("Некоторые исполнители не соответствуют требованиям к голосам.");
        this.jPopupMenu1.show(this.jListSingers,0, 18);
    }//GEN-LAST:event_jLabelListSingersMouseEntered

    private void jLabelListSingersMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelListSingersMouseExited
        // TODO add your handling code here:
        this.jPopupMenu1.setVisible(false);
    }//GEN-LAST:event_jLabelListSingersMouseExited

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.jLabelCreationDate.setEnabled(false);
        this.jLabelCreationDate.setVisible(false);
        this.jLabelDateOfPerformance.setEnabled(false);
        this.jLabelDateOfPerformance.setVisible(false);
        this.jLabelGenre.setEnabled(false);
        this.jLabelGenre.setVisible(false);
        if(this.music.equalsMusicalRecording(new MusicalRecording())==true)
        {
            this.songAdd=new SongInformation();
            this.musicAdd=new MusicalRecording();
           this.jButtonAdd.setEnabled(false);
            this.name=false;
            this.creationDate=true;
            this.dateOfPerformance=true;
            this.genre=true;
            this.listSingers=false;
        }
        else
        {
            this.musicAdd=new MusicalRecording(this.music);
            this.songAdd=new SongInformation(this.music.getSong());
            this.jButtonAdd.setText("Изменить");
            this.jLabelName.setEnabled(false);
            this.jLabelName.setVisible(false);
            this.jLabelListSingers.setEnabled(false);
            this.jLabelListSingers.setVisible(false);
            this.name=true;
            this.creationDate=true;
            this.dateOfPerformance=true;
            this.genre=true;
            this.listSingers=true;
            this.jFormattedTextFieldName.setText(this.music.getSong().getName());
            if(new DateCompare().compare(this.music.getSong().getCreationDate(), "1.1.1")!=0)
               this.jFormattedTextFieldCreationDate.setText(this.music.getSong().getCreationDate());
            if(new DateCompare().compare(this.music.getDateOfPerformance(), "1.1.1")!=0)
               this.jFormattedTextFielDateOfPerformance.setText(this.music.getDateOfPerformance());
            for(int i=0;i<this.music.getSong().sizeListPoets();i++)
            {
                 this.listModelPoets.addElement(this.music.getSong().getPoet(i).getName()+" "+this.music.getSong().getPoet(i).getSurname());   
            }
            for(int i=0;i<this.music.getSong().sizeListComposers();i++)
            {
                 this.listModelComposers.addElement(this.music.getSong().getComposer(i).getName()+" "+this.music.getSong().getComposer(i).getSurname());   
            }
            for(int i=0;i<this.music.sizeListSingers();i++)
            {
                 this.listModelSingers.addElement(this.music.getSinger(i).getName()+" "+this.music.getSinger(i).getSurname());  
                 this.listArraySingers.add(this.music.getSinger(i));
            }
            if(this.music.getSong().getGenre().equalsIgnoreCase(SongInformation.CLASSIC))
                this.jComboBoxGenre.setSelectedIndex(3);
            else
            {
                if(this.music.getSong().getGenre().equalsIgnoreCase(SongInformation.JAZZ))
                {
                    this.jComboBoxGenre.setSelectedIndex(2);
                }
                else
                {
                    if(this.music.getSong().getGenre().equalsIgnoreCase(SongInformation.POP))
                    {
                        this.jComboBoxGenre.setSelectedIndex(1);
                    }
                }
            }
            if(this.music.getSong().getRequirementVoice().getBass()==true)
                this.jRadioButtonBass.setSelected(true);
            if(this.music.getSong().getRequirementVoice().getBaritone()==true)
                this.jRadioButtonBaritone.setSelected(true);
            if(this.music.getSong().getRequirementVoice().getContralto()==true)
                this.jRadioButtonContralto.setSelected(true);
            if(this.music.getSong().getRequirementVoice().getSoprano()==true)
                this.jRadioButtonSoprano.setSelected(true);
            if(this.music.getSong().getRequirementVoice().getTenor()==true)
                this.jRadioButtonTenor.setSelected(true);
            this.voice=this.music.getSong().getRequirementVoice();
        }
        this.repaint();
    }//GEN-LAST:event_formWindowOpened

    private void jButtonListComposersSelectMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListComposersSelectMouseEntered
        // TODO add your handling code here:
        this.jButtonListComposersSelect.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListComposersSelectMouseEntered

    private void jButtonListComposersSelectMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListComposersSelectMouseExited
        // TODO add your handling code here:
          this.jButtonListComposersSelect.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListComposersSelectMouseExited

    private void jButtonListComposersSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListComposersSelectActionPerformed
        // TODO add your handling code here:
         MusicIndustryWorker t=new MusicIndustryWorker();
        new JDialogSelectMan((Frame) this.getParent(),true,t,this.people).setVisible(true);
        if(t.equalsMusicIndustryWorker(new MusicIndustryWorker())==false)
        {
            int oldSize=this.songAdd.sizeListComposers();
            t.setComposer(true);
            this.songAdd.addListComposers(t);
            if(oldSize!=this.songAdd.sizeListComposers())
            {
                this.listModelComposers.addElement(t.getName()+" "+t.getSurname());
            }
        }
    }//GEN-LAST:event_jButtonListComposersSelectActionPerformed

    private void jButtonListComposersChangeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListComposersChangeMouseEntered
        // TODO add your handling code here:
         this.jButtonListComposersChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListComposersChangeMouseEntered

    private void jButtonListComposersChangeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListComposersChangeMouseExited
        // TODO add your handling code here:
        this.jButtonListComposersChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListComposersChangeMouseExited

    private void jButtonListComposersChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListComposersChangeActionPerformed
        // TODO add your handling code here:
         int i=this.jListComposers.getSelectedIndex();
        if(i!=-1)
       {
            MusicIndustryWorker newWorker=new MusicIndustryWorker(this.songAdd.getComposer(i));
           MusicIndustryWorker old=new MusicIndustryWorker(this.songAdd.getComposer(i));
            new JDialogAddComposerOrPoet((Frame) this.getParent(),true,newWorker).setVisible(true);
            if(newWorker.equalsMusicIndustryWorker(old)==false)
            {
                newWorker.setComposer(true);
                int oldSize=this.songAdd.sizeListComposers();
                this.songAdd.addListComposers(newWorker);
                if(oldSize!=this.songAdd.sizeListComposers())
                {
                     this.songAdd.removeListComposers(i);
                     this.listModelComposers.remove(i);
                    this.listModelComposers.addElement(newWorker.getName()+" "+newWorker.getSurname());   
                    this.addListPeople(newWorker);
                } 
            }
        }
    }//GEN-LAST:event_jButtonListComposersChangeActionPerformed

    private void jButtonListComposersAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListComposersAddMouseEntered
        // TODO add your handling code here:
        this.jButtonListComposersAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListComposersAddMouseEntered

    private void jButtonListComposersAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListComposersAddMouseExited
        // TODO add your handling code here:
        this.jButtonListComposersAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListComposersAddMouseExited

    private void jButtonListComposersAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListComposersAddActionPerformed
        // TODO add your handling code here:
        MusicIndustryWorker t=new MusicIndustryWorker();
        new JDialogAddComposerOrPoet((Frame) this.getParent(),true,t).setVisible(true);
        if(t.equalsMusicIndustryWorker(new MusicIndustryWorker())==false)
        {
            t.setComposer(true);
            int oldSize=this.songAdd.sizeListComposers();
            this.songAdd.addListComposers(t);
            if(oldSize!=this.songAdd.sizeListComposers())
            {
                this.listModelComposers.addElement(t.getName()+" "+t.getSurname());   
                this.addListPeople(t);
            }     
        }
    }//GEN-LAST:event_jButtonListComposersAddActionPerformed

    private void jButtonListComposersDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListComposersDeleteMouseEntered
        // TODO add your handling code here:
        this.jButtonListComposersDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListComposersDeleteMouseEntered

    private void jButtonListComposersDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListComposersDeleteMouseExited
        // TODO add your handling code here:
         this.jButtonListComposersDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListComposersDeleteMouseExited

    private void jButtonListComposersDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListComposersDeleteActionPerformed
        // TODO add your handling code here:
        int i=this.jListComposers.getSelectedIndex();
        if(i!=-1)
        {
            this.songAdd.removeListComposers(i);
            this.listModelComposers.remove(i);
        }
    }//GEN-LAST:event_jButtonListComposersDeleteActionPerformed

    private void jButtonListSingersAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListSingersAddMouseEntered
        // TODO add your handling code here:
         this.jButtonListSingersAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListSingersAddMouseEntered

    private void jButtonListSingersAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListSingersAddMouseExited
        // TODO add your handling code here:
         this.jButtonListSingersAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListSingersAddMouseExited
protected void addListPeople(MusicIndustryWorker t)
{
    boolean a=true;
    int k=this.listArraySingers.size()-1;
    for( MusicIndustryWorker v:this.people)
    {
        if(v.equalsMusicIndustryWorker(t)==true)
        {
            a=false;
            break;
        }
    }
    if(a==true)
    {
        this.people.add(t);
    }
}
    
    private void jButtonListSingersAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListSingersAddActionPerformed
        // TODO add your handling code here:
        MusicIndustryWorker t=new MusicIndustryWorker();
        new JDialogAddSingers((Frame) this.getParent(),true,t).setVisible(true);
        if(t.equalsMusicIndustryWorker(new MusicIndustryWorker())==false)
        {
            t.setSinger(true);
            if(this.checkSingers_3(t)==true)
            {
                if(this.listArraySingers.size()==0)
                {
                    this.listSingers=true;
                    this.jLabelListSingers.setEnabled(false);
                    this.jLabelListSingers.setVisible(false);
                    this.checkAllValues();  
                }
                this.listArraySingers.add(t);
                this.addListPeople(t);
                this.listModelSingers.addElement(t.getName()+" "+t.getSurname());
                if(this.checkSingers_2()==false&&this.listSingers==true)
                {
                    this.listSingers=false;
                    this.jLabelListSingers.setEnabled(true);
                    this.jLabelListSingers.setVisible(true);
                    this.checkAllValues(); 
                }
            }
        }
    }//GEN-LAST:event_jButtonListSingersAddActionPerformed

    private void jButtonListSingersSelectMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListSingersSelectMouseEntered
        // TODO add your handling code here:
         this.jButtonListSingersSelect.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListSingersSelectMouseEntered

    private void jButtonListSingersSelectMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListSingersSelectMouseExited
        // TODO add your handling code here:
         this.jButtonListSingersSelect.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListSingersSelectMouseExited

    private void jButtonListSingersSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListSingersSelectActionPerformed
        // TODO add your handling code here:
        MusicIndustryWorker t=new MusicIndustryWorker();
        new JDialogSelectMan((Frame) this.getParent(),true,t,this.people).setVisible(true);
        if(t.equalsMusicIndustryWorker(new MusicIndustryWorker())==false)
        {
            t.setSinger(true);
            if(this.checkSingers_3(t)==true)
            {
                if(this.listArraySingers.size()==0)
                {
                    this.listSingers=true;
                    this.jLabelListSingers.setEnabled(false);
                    this.jLabelListSingers.setVisible(false);
                    this.checkAllValues();  
                }
                this.listArraySingers.add(t);
                this.listModelSingers.addElement(t.getName()+" "+t.getSurname());
                if(this.checkSingers_2()==false&&this.listSingers==true)
                {
                    this.listSingers=false;
                    this.jLabelListSingers.setEnabled(true);
                    this.jLabelListSingers.setVisible(true);
                    this.checkAllValues(); 
                }
            }
        }
    }//GEN-LAST:event_jButtonListSingersSelectActionPerformed

    private void jButtonListSingersChangeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListSingersChangeMouseEntered
        // TODO add your handling code here:
        this.jButtonListSingersChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListSingersChangeMouseEntered

    private void jButtonListSingersChangeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListSingersChangeMouseExited
        // TODO add your handling code here:
         this.jButtonListSingersChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListSingersChangeMouseExited

    private void jButtonListSingersChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListSingersChangeActionPerformed
        // TODO add your handling code here:
            int i=this.jListSingers.getSelectedIndex();
        if(i!=-1)
       {
           MusicIndustryWorker old=new  MusicIndustryWorker(this.listArraySingers.get(i));
            new JDialogAddSingers((Frame) this.getParent(),true,this.listArraySingers.get(i)).setVisible(true);
            if(this.listArraySingers.get(i).equalsMusicIndustryWorker(old)==false)
            {
                if(this.checkSingers_3(old)==true)
                {
                    this.listModelSingers.setElementAt(this.listArraySingers.get(i).getName()+" "+this.listArraySingers.get(i).getSurname(), i);
                    this.addListPeople(this.listArraySingers.get(i));
                    if(this.checkSingers_2()==true)
                    {
                        if(this.listSingers==false)
                        {
                            this.listSingers=true;
                            this.jLabelListSingers.setEnabled(false);
                            this.jLabelListSingers.setVisible(false);
                            this.checkAllValues();
                        }
                    }
                    else
                    {
                        if(this.listSingers==true)
                        {
                             this.listSingers=false;
                            this.jLabelListSingers.setEnabled(true);
                            this.jLabelListSingers.setVisible(true);
                            this.checkAllValues();
                       }
                    }
                }
                 else
                    this.listArraySingers.set(i, old);
            }
       }
    }//GEN-LAST:event_jButtonListSingersChangeActionPerformed
    protected boolean checkSingers_2()
    {
        boolean a=true;
        while(this.musicAdd.sizeListSingers()!=0)
        {
            this.musicAdd.removeListSingers(0);
        }
        this.musicAdd.setSong(this.songAdd);
        try
        {
            for( MusicIndustryWorker v:this.listArraySingers)
            {
                this.musicAdd.addListSinger(v);
            }
        }
        catch(IllegalArgumentException e)
        {
            a=false;
        }
        return a;
    }
    protected boolean checkSingers_3( MusicIndustryWorker t)
    {
        boolean a=true;
         while(this.musicAdd.sizeListSingers()!=0)
        {
            this.musicAdd.removeListSingers(0);
        }
        this.musicAdd.setSong(new SongInformation());
            for( MusicIndustryWorker v:this.listArraySingers)
            {
                this.musicAdd.addListSinger(v);
            }
        this.musicAdd.addListSinger(t);
        if(this.musicAdd.sizeListSingers()!=this.listArraySingers.size()+1)
            a=false;
        return a;
    }
    private void jButtonListSingersDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListSingersDeleteMouseEntered
        // TODO add your handling code here:
        this.jButtonListSingersDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListSingersDeleteMouseEntered

    private void jButtonListSingersDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListSingersDeleteMouseExited
        // TODO add your handling code here:
         this.jButtonListSingersDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListSingersDeleteMouseExited

    private void jButtonListSingersDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListSingersDeleteActionPerformed
        // TODO add your handling code here:
        int i=this.jListSingers.getSelectedIndex();
        if(i!=-1)
        {
            this.listArraySingers.remove(i);
            this.listModelSingers.remove(i);
            if(this.listArraySingers.size()!=0)
            {
                if(this.checkSingers_2()==true)
                {
                    if(this.listSingers==false)
                    {
                        this.listSingers=true;
                        this.jLabelListSingers.setEnabled(false);
                        this.jLabelListSingers.setVisible(false);
                        this.checkAllValues();
                    }
                }
            }
            else
            {
                if(this.listSingers==true)
                {
                    this.listSingers=false;
                    this.jLabelListSingers.setEnabled(true);
                    this.jLabelListSingers.setVisible(true);
                    this.checkAllValues();
                }
            }
        }
    }//GEN-LAST:event_jButtonListSingersDeleteActionPerformed

    private void jButtonListPoetsAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListPoetsAddMouseEntered
        // TODO add your handling code here:
         this.jButtonListPoetsAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListPoetsAddMouseEntered

    private void jButtonListPoetsAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListPoetsAddMouseExited
        // TODO add your handling code here:
        this.jButtonListPoetsAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListPoetsAddMouseExited

    private void jButtonListPoetsAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListPoetsAddActionPerformed
        // TODO add your handling code here:
        MusicIndustryWorker t=new MusicIndustryWorker();
        new JDialogAddComposerOrPoet((Frame) this.getParent(),true,t).setVisible(true);
        if(t.equalsMusicIndustryWorker(new MusicIndustryWorker())==false)
        {
            t.setPoet(true);
            int oldSize=this.songAdd.sizeListPoets();
            this.songAdd.addListPoets(t);
            if(oldSize!=this.songAdd.sizeListPoets())
            {
                this.listModelPoets.addElement(t.getName()+" "+t.getSurname());   
                this.addListPeople(t);
            }     
        }
    }//GEN-LAST:event_jButtonListPoetsAddActionPerformed

    private void jButtonListPoetsSelectMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListPoetsSelectMouseEntered
        // TODO add your handling code here:
         this.jButtonListPoetsSelect.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListPoetsSelectMouseEntered

    private void jButtonListPoetsSelectMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListPoetsSelectMouseExited
        // TODO add your handling code here:
        this.jButtonListPoetsSelect.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListPoetsSelectMouseExited

    private void jButtonListPoetsSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListPoetsSelectActionPerformed
        // TODO add your handling code here:
        MusicIndustryWorker t=new MusicIndustryWorker();
        new JDialogSelectMan((Frame) this.getParent(),true,t,this.people).setVisible(true);
        if(t.equalsMusicIndustryWorker(new MusicIndustryWorker())==false)
        {
            int oldSize=this.songAdd.sizeListPoets();
            t.setPoet(true);
            this.songAdd.addListPoets(t);
            if(oldSize!=this.songAdd.sizeListPoets())
            {
                this.listModelPoets.addElement(t.getName()+" "+t.getSurname());
            }
        }
    }//GEN-LAST:event_jButtonListPoetsSelectActionPerformed

    private void jButtonListPoetsChangeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListPoetsChangeMouseEntered
        // TODO add your handling code here:
        this.jButtonListPoetsChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListPoetsChangeMouseEntered

    private void jButtonListPoetsChangeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListPoetsChangeMouseExited
        // TODO add your handling code here:
        this.jButtonListPoetsChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListPoetsChangeMouseExited

    private void jButtonListPoetsChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListPoetsChangeActionPerformed
        // TODO add your handling code here:
        int i=this.jListPoets.getSelectedIndex();
        if(i!=-1)
       {
            MusicIndustryWorker newWorker=new MusicIndustryWorker(this.songAdd.getPoet(i));
           MusicIndustryWorker old=new MusicIndustryWorker(this.songAdd.getPoet(i));
            new JDialogAddComposerOrPoet((Frame) this.getParent(),true,newWorker).setVisible(true);
            if(newWorker.equalsMusicIndustryWorker(old)==false)
            {
                newWorker.setPoet(true);
                int oldSize=this.songAdd.sizeListPoets();
                this.songAdd.addListPoets(newWorker);
                if(oldSize!=this.songAdd.sizeListPoets())
                {
                     this.songAdd.removeListPoets(i);
                     this.listModelPoets.remove(i);
                    this.listModelPoets.addElement(newWorker.getName()+" "+newWorker.getSurname());   
                    this.addListPeople(newWorker);
                } 
            }
        }
    }//GEN-LAST:event_jButtonListPoetsChangeActionPerformed

    private void jButtonListPoetsDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListPoetsDeleteMouseEntered
        // TODO add your handling code here:
        this.jButtonListPoetsDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonListPoetsDeleteMouseEntered

    private void jButtonListPoetsDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListPoetsDeleteMouseExited
        // TODO add your handling code here:
        this.jButtonListPoetsDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonListPoetsDeleteMouseExited

    private void jButtonListPoetsDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListPoetsDeleteActionPerformed
        // TODO add your handling code here:
        int i=this.jListPoets.getSelectedIndex();
        if(i!=-1)
        {
            this.songAdd.removeListPoets(i);
            this.listModelPoets.remove(i);
        }
    }//GEN-LAST:event_jButtonListPoetsDeleteActionPerformed
protected void checkAllValues()
{
    boolean a=false;
    if(this.name==true&&this.creationDate==true&&this.dateOfPerformance==true&&this.genre==true&&this.listSingers==true)
    {
        if(this.jButtonAdd.isEnabled()==false)
            this.jButtonAdd.setEnabled(true);
        a=true;
    }
    if(a==false)
    {
        if(this.jButtonAdd.isEnabled()==true)
            this.jButtonAdd.setEnabled(false);
    }
}
/**
 * @param args the command line arguments
 */
@Override
public void paint(Graphics g)
{
    g.drawImage(this.picture, 0, 25, this);
    this.paint_1();
}
@Override
public void update(Graphics g)
{
    g.drawImage(this.picture, 0, 25,this);
    this.update_1();
    
}
public void paint_1()
{
    for(int i=0;i<this.getContentPane().getComponentCount();i++)
    {
        this.getContentPane().getComponent(i).repaint();
    }
}
public void update_1()
{
    for(int i=0;i<this.getContentPane().getComponentCount();i++)
    {
        this.getContentPane().getComponent(i).update(this.getContentPane().getComponent(i).getGraphics());
    }
}
protected MusicalRecording music;//пременная хранящая объект кторый получен из родительской формы
protected SongInformation songAdd;//пременная хранящая добавляемую информацию
protected MusicalRecording musicAdd;//переменная хранящая добавляемую информацию
protected boolean name;//для проверки правильно ли введено название произведения
protected boolean creationDate;//для проверки правильно ли введена дата создания
protected boolean dateOfPerformance;//для проверки правильно ли введена дата исполнения
protected boolean genre;//для проверки если выюрана класическая музыка чтобы у нее были выбраны требования к голосам
protected DefaultListModel listModelSingers;//список исполнителей для jLIstSingers
protected DefaultListModel listModelComposers;//список композиторов для jListComposers
protected DefaultListModel listModelPoets;//список поэтов для jListPoets
protected Voice voice;//требования к голасам исполнителей
protected boolean listSingers;//для проверки что имеются исполнители а также что певцы удволетворяют требованием к голосам
protected Image picture;//заставка
protected ArrayList<MusicIndustryWorker> listArraySingers;//колекция хранящая добавляемых певцов
protected ArrayList<MusicIndustryWorker> people;//список со всеми людьми
protected ImageIcon pictureLabel;//картинка для надписи
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonListComposersAdd;
    private javax.swing.JButton jButtonListComposersChange;
    private javax.swing.JButton jButtonListComposersDelete;
    private javax.swing.JButton jButtonListComposersSelect;
    private javax.swing.JButton jButtonListPoetsAdd;
    private javax.swing.JButton jButtonListPoetsChange;
    private javax.swing.JButton jButtonListPoetsDelete;
    private javax.swing.JButton jButtonListPoetsSelect;
    private javax.swing.JButton jButtonListSingersAdd;
    private javax.swing.JButton jButtonListSingersChange;
    private javax.swing.JButton jButtonListSingersDelete;
    private javax.swing.JButton jButtonListSingersSelect;
    private javax.swing.JComboBox jComboBoxGenre;
    private javax.swing.JFormattedTextField jFormattedTextFielDateOfPerformance;
    private javax.swing.JFormattedTextField jFormattedTextFieldCreationDate;
    private javax.swing.JFormattedTextField jFormattedTextFieldName;
    private javax.swing.JLabel jLabelCreationDate;
    private javax.swing.JLabel jLabelDateOfPerformance;
    private javax.swing.JLabel jLabelGenre;
    private javax.swing.JLabel jLabelListSingers;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelVoice;
    private javax.swing.JList jListComposers;
    private javax.swing.JList jListPoets;
    private javax.swing.JList jListSingers;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JRadioButton jRadioButtonBaritone;
    private javax.swing.JRadioButton jRadioButtonBass;
    private javax.swing.JRadioButton jRadioButtonContralto;
    private javax.swing.JRadioButton jRadioButtonSoprano;
    private javax.swing.JRadioButton jRadioButtonTenor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
