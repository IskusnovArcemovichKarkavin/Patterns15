/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package main_frame;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.DefaultRowSorter;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import main_compare.DateCompare;
import main_сlasses.MusicIndustryWorker;
import main_сlasses.MusicalRecording;
import main_сlasses.SongInformation;

/**
 *
 * @author константин
 */
public class JDialogMusicalRecording extends javax.swing.JDialog {

/**
 * Creates new form JDialogMusicalRecording
 */
public JDialogMusicalRecording(java.awt.Frame parent, boolean modal,ArrayList<MusicalRecording> music) {
    super(parent, modal);
    initComponents();
    this.music=music;
 this.getContentPane().setBackground(Color.white);
 this.jComboBoxGenre.setBackground(Color.WHITE);
    this.initializeFields();
    this.changingComponents();
}
private void initializeFields()
{
   picture=Toolkit.getDefaultToolkit().getImage("program/155.jpg");
    this.pictureLabel=new ImageIcon("program/13.png");
   this.jLabelQuestion.setIcon(this.pictureLabel);
   this.jPopupMenu1=new JPopupMenu();
   this.genre=null;
   this.worker=null;
   this.oldIndexListPoets=0;
   this.listPoets=new ArrayList<>();
}
private void changingComponents()
{
    DefaultTableCellRenderer r = (DefaultTableCellRenderer) this.jTableMusic.getDefaultRenderer(String.class);
    r.setHorizontalAlignment(JLabel.CENTER);
    r.setVerticalAlignment(JLabel.CENTER);
    r = (DefaultTableCellRenderer) this.jTableMusic.getTableHeader().getDefaultRenderer();
    r.setHorizontalAlignment(JLabel.CENTER);
    r.setVerticalAlignment(JLabel.CENTER);
    this.jTableMusic.getColumnModel().getColumn(0).setMinWidth(340);
    this.jTableMusic.getColumnModel().getColumn(0).setMaxWidth(340);
    DefaultRowSorter a= (DefaultRowSorter) this.jTableMusic.getRowSorter();
    a.setComparator(2,new DateCompare());
    a.setComparator(1,new DateCompare());
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMusic = new javax.swing.JTable();
        jButtonExit = new javax.swing.JButton();
        jLabelPoupMenu = new javax.swing.JLabel();
        jLabelQuestion = new javax.swing.JLabel();
        jLabelListMusicalRecording = new javax.swing.JLabel();
        jComboBoxGenre = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListPoets = new javax.swing.JList();
        jFormattedTextFieldSearchName = new javax.swing.JFormattedTextField();
        jFormattedTextFieldSearchSurname = new javax.swing.JFormattedTextField();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("main_frame/Bundle"); // NOI18N
        setTitle(bundle.getString("JDialogMusicalRecording.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(1000, 700));
        setModal(true);
        setResizable(false);
        addWindowListener(formListener);
        getContentPane().setLayout(null);

        jTableMusic.setAutoCreateRowSorter(true);
        jTableMusic.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jTableMusic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Название", "Дата создания", "Дата исполнения", "Жанр"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableMusic.setFillsViewportHeight(true);
        jTableMusic.setGridColor(new java.awt.Color(51, 51, 51));
        jTableMusic.setRequestFocusEnabled(false);
        jTableMusic.setRowHeight(20);
        jTableMusic.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableMusic.getTableHeader().setResizingAllowed(false);
        jTableMusic.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableMusic);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(150, 50, 660, 240);

        jButtonExit.setBackground(new java.awt.Color(255, 255, 255));
        jButtonExit.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonExit.setText(bundle.getString("JDialogMusicalRecording.jButtonExit.text")); // NOI18N
        jButtonExit.setToolTipText(bundle.getString("JDialogMusicalRecording.jButtonExit.toolTipText")); // NOI18N
        jButtonExit.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        jButtonExit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonExit.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonExit.setFocusable(false);
        jButtonExit.setName("exit"); // NOI18N
        jButtonExit.setRolloverEnabled(false);
        jButtonExit.addMouseListener(formListener);
        jButtonExit.addActionListener(formListener);
        getContentPane().add(jButtonExit);
        jButtonExit.setBounds(330, 590, 320, 60);

        jLabelPoupMenu.setBackground(new java.awt.Color(255, 255, 255));
        jLabelPoupMenu.setText(bundle.getString("JDialogMusicalRecording.jLabelPoupMenu.text")); // NOI18N
        getContentPane().add(jLabelPoupMenu);
        jLabelPoupMenu.setBounds(150, 290, 20, 20);

        jLabelQuestion.setIcon(new javax.swing.ImageIcon("C:\\Users\\константин\\Documents\\NetBeansProjects\\13.png")); // NOI18N
        jLabelQuestion.setText(bundle.getString("JDialogMusicalRecording.jLabelQuestion.text")); // NOI18N
        jLabelQuestion.addMouseListener(formListener);
        getContentPane().add(jLabelQuestion);
        jLabelQuestion.setBounds(810, 120, 34, 30);

        jLabelListMusicalRecording.setBackground(new java.awt.Color(255, 255, 255));
        jLabelListMusicalRecording.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabelListMusicalRecording.setText(bundle.getString("JDialogMusicalRecording.jLabelListMusicalRecording.text")); // NOI18N
        getContentPane().add(jLabelListMusicalRecording);
        jLabelListMusicalRecording.setBounds(340, 10, 300, 30);

        jComboBoxGenre.setBackground(new java.awt.Color(233, 233, 244));
        jComboBoxGenre.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Любой", "Рок", "Поп", "Джаз", "Классика" }));
        jComboBoxGenre.setToolTipText(bundle.getString("JDialogMusicalRecording.jComboBoxGenre.toolTipText")); // NOI18N
        jComboBoxGenre.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)), bundle.getString("JDialogMusicalRecording.jComboBoxGenre.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP)); // NOI18N
        jComboBoxGenre.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jComboBoxGenre.addActionListener(formListener);
        getContentPane().add(jComboBoxGenre);
        jComboBoxGenre.setBounds(160, 370, 230, 50);

        jListPoets.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)), bundle.getString("JDialogMusicalRecording.jListPoets.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP)); // NOI18N
        jListPoets.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListPoets.addMouseListener(formListener);
        jScrollPane3.setViewportView(jListPoets);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(490, 300, 350, 190);

        jFormattedTextFieldSearchName.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)), bundle.getString("JDialogMusicalRecording.jFormattedTextFieldSearchName.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP)); // NOI18N
        try {
            jFormattedTextFieldSearchName.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("***************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldSearchName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextFieldSearchName.setAutoscrolls(false);
        jFormattedTextFieldSearchName.addKeyListener(formListener);
        getContentPane().add(jFormattedTextFieldSearchName);
        jFormattedTextFieldSearchName.setBounds(490, 490, 140, 38);

        jFormattedTextFieldSearchSurname.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)), bundle.getString("JDialogMusicalRecording.jFormattedTextFieldSearchSurname.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP)); // NOI18N
        try {
            jFormattedTextFieldSearchSurname.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("***************")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldSearchSurname.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFormattedTextFieldSearchSurname.setAutoscrolls(false);
        jFormattedTextFieldSearchSurname.addKeyListener(formListener);
        getContentPane().add(jFormattedTextFieldSearchSurname);
        jFormattedTextFieldSearchSurname.setBounds(700, 490, 140, 38);

        pack();
        setLocationRelativeTo(null);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.KeyListener, java.awt.event.MouseListener, java.awt.event.WindowListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == jButtonExit) {
                JDialogMusicalRecording.this.jButtonExitActionPerformed(evt);
            }
            else if (evt.getSource() == jComboBoxGenre) {
                JDialogMusicalRecording.this.jComboBoxGenreActionPerformed(evt);
            }
        }

        public void keyPressed(java.awt.event.KeyEvent evt) {
        }

        public void keyReleased(java.awt.event.KeyEvent evt) {
            if (evt.getSource() == jFormattedTextFieldSearchName) {
                JDialogMusicalRecording.this.jFormattedTextFieldSearchNameKeyReleased(evt);
            }
            else if (evt.getSource() == jFormattedTextFieldSearchSurname) {
                JDialogMusicalRecording.this.jFormattedTextFieldSearchSurnameKeyReleased(evt);
            }
        }

        public void keyTyped(java.awt.event.KeyEvent evt) {
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == jListPoets) {
                JDialogMusicalRecording.this.jListPoetsMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == jButtonExit) {
                JDialogMusicalRecording.this.jButtonExitMouseEntered(evt);
            }
            else if (evt.getSource() == jLabelQuestion) {
                JDialogMusicalRecording.this.jLabelQuestionMouseEntered(evt);
            }
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == jButtonExit) {
                JDialogMusicalRecording.this.jButtonExitMouseExited(evt);
            }
            else if (evt.getSource() == jLabelQuestion) {
                JDialogMusicalRecording.this.jLabelQuestionMouseExited(evt);
            }
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }

        public void windowActivated(java.awt.event.WindowEvent evt) {
        }

        public void windowClosed(java.awt.event.WindowEvent evt) {
        }

        public void windowClosing(java.awt.event.WindowEvent evt) {
        }

        public void windowDeactivated(java.awt.event.WindowEvent evt) {
        }

        public void windowDeiconified(java.awt.event.WindowEvent evt) {
        }

        public void windowIconified(java.awt.event.WindowEvent evt) {
        }

        public void windowOpened(java.awt.event.WindowEvent evt) {
            if (evt.getSource() == JDialogMusicalRecording.this) {
                JDialogMusicalRecording.this.formWindowOpened(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonExitMouseEntered
        // TODO add your handling code here:
        jButtonExit.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonExitMouseEntered

    private void jButtonExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonExitMouseExited
        // TODO add your handling code here:
        jButtonExit.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonExitMouseExited

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jLabelQuestionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelQuestionMouseEntered
        // TODO add your handling code here:
        this.jPopupMenu1.removeAll();
        this.jPopupMenu1.add("Для сортировки по определенному полю нажмите заголовок соответствующего столбца.");
        this.jPopupMenu1.show(this.jLabelPoupMenu,0, 0);
    }//GEN-LAST:event_jLabelQuestionMouseEntered

    private void jLabelQuestionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelQuestionMouseExited
        // TODO add your handling code here:
        this.jPopupMenu1.setVisible(false);
    }//GEN-LAST:event_jLabelQuestionMouseExited

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        if(this.music.size()!=0)
        {
            this.fillTable();
            this.creationListPoets();
            this.filljListSingers();
        }
        this.repaint();
    }//GEN-LAST:event_formWindowOpened
protected void creationListPoets()
{
    boolean k;
    for(MusicalRecording v : music)
    {
        for(int i=0;i<v.getSong().sizeListPoets();i++)
        {
            k=false;
            for(int j=0;j<this.listPoets.size();j++)
            {
                if(this.listPoets.get(j).equalsMusicIndustryWorker(v.getSong().getPoet(i))==true)
                {
                    k=true;
                    break;
                }
            }
            if(k==false)
            {
                this.listPoets.add(v.getSong().getPoet(i));
            }
        }
    }
}
protected void filljListSingers()
{
    DefaultListModel listModelPoets=new DefaultListModel(); 
    listModelPoets.addElement("Любой");
    for(MusicIndustryWorker v:this.listPoets)
    {
        listModelPoets.addElement(v.getName()+" "+v.getSurname());
    }
    this.jListPoets.setModel(listModelPoets);
    this.jListPoets.setSelectedIndex(0);
}
    private void jComboBoxGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxGenreActionPerformed
        // TODO add your handling code here:
      switch(this.jComboBoxGenre.getSelectedIndex())
      {
          case 0:{
              if(this.genre!=null)
              {
                    this.genre=null;
                    this.fillTable();
              }
          }break;
          case 1:{
              if(this.genre!=null)
              {
                   if(this.genre.equalsIgnoreCase(SongInformation.ROCK)==false)
                    {
                        this.genre=SongInformation.ROCK;
                        this.fillTable();
                    }
              }
              else
              {
                  this.genre=SongInformation.ROCK;
                  this.fillTable();
              }
          }break;
          case 2:{
              if(this.genre!=null)
              {
                   if(this.genre.equalsIgnoreCase(SongInformation.POP)==false)
                   {
                        this.genre=SongInformation.POP;
                        this.fillTable();
                    }
              }
              else
              {
                  this.genre=SongInformation.POP;
                  this.fillTable();
              }
          }break;
          case 3:{
              if(this.genre!=null)
              {
                  if(this.genre.equalsIgnoreCase(SongInformation.JAZZ)==false)
                  {
                        this.genre=SongInformation.JAZZ;
                        this.fillTable();
                   }
              }
              else
              {
                  this.genre=SongInformation.JAZZ;
                  this.fillTable();
              }
          }break;
          case 4:{
              if(this.genre!=null)
              {
                  if(this.genre.equalsIgnoreCase(SongInformation.CLASSIC)==false)
                  {
                       this.genre=SongInformation.CLASSIC;
                       this.fillTable();
                   }
              }
              else
              {
                  this.genre=SongInformation.CLASSIC;
                  this.fillTable();
              }
          }break;
      }
      
          
    }//GEN-LAST:event_jComboBoxGenreActionPerformed

    private void jListPoetsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPoetsMouseClicked
        // TODO add your handling code here:
        if(this.oldIndexListPoets!=this.jListPoets.getSelectedIndex())
        {
            if(this.jListPoets.getSelectedIndex()!=0)
                this.worker=this.listPoets.get(this.jListPoets.getSelectedIndex()-1);
            else
                this.worker=null;
            this.oldIndexListPoets=this.jListPoets.getSelectedIndex();
            this.fillTable();
        }
    }//GEN-LAST:event_jListPoetsMouseClicked

    private void jFormattedTextFieldSearchNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextFieldSearchNameKeyReleased
        // TODO add your handling code here:
        if(this.listPoets.size()!=0)
        {
            if(this.jFormattedTextFieldSearchName.getText().trim().equalsIgnoreCase("")==false)
            {
                int a=-1;
                for(int i=0;i<this.listPoets.size();i++)
                {
                    if(this.listPoets.get(i).getName().toLowerCase().indexOf(this.jFormattedTextFieldSearchName.getText().trim().toLowerCase())==0)
                    {
                        a=i+1;
                        break;
                    }
                }
                if(a==-1)
                {
                    if(this.oldIndexListPoets!=0)
                    {
                        this.jListPoets.setSelectedIndex(0);
                        this.oldIndexListPoets=0;
                        this.worker=null;
                        this.fillTable();
                    }

                }
                else
                {
                    if(this.oldIndexListPoets!=a)
                    {
                        this.jListPoets.setSelectedIndex(a);
                        this.oldIndexListPoets=a;
                        this.worker=this.listPoets.get(a-1);
                        this.fillTable();
                    }
                }
            }
            else
            {
                if(this.oldIndexListPoets!=0)
                {
                    this.jListPoets.setSelectedIndex(0);
                    this.oldIndexListPoets=0;
                    this.worker=null;
                    this.fillTable();
                }
            }
        }
    }//GEN-LAST:event_jFormattedTextFieldSearchNameKeyReleased

    private void jFormattedTextFieldSearchSurnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextFieldSearchSurnameKeyReleased
        // TODO add your handling code here:
        if(this.listPoets.size()!=0)
        {
            if(this.jFormattedTextFieldSearchSurname.getText().trim().equalsIgnoreCase("")==false)
            {
                int a=-1;
                for(int i=0;i<this.listPoets.size();i++)
                {
                    if(this.listPoets.get(i).getSurname().toLowerCase().indexOf(this.jFormattedTextFieldSearchSurname.getText().trim().toLowerCase())==0)
                    {
                        a=i+1;
                        break;
                    }
                }
                if(a==-1)
                {
                    if(this.oldIndexListPoets!=0)
                    {
                        this.jListPoets.setSelectedIndex(0);
                        this.oldIndexListPoets=0;
                        this.worker=null;
                        this.fillTable();
                    }
                }
                else
                {
                    if(this.oldIndexListPoets!=a)
                    {
                        this.jListPoets.setSelectedIndex(a);
                        this.oldIndexListPoets=a;
                        this.worker=this.listPoets.get(a-1);
                        this.fillTable();
                    }
                }
            }
            else
            {
                if(this.oldIndexListPoets!=0)
                {
                    this.jListPoets.setSelectedIndex(0);
                    this.oldIndexListPoets=0;
                    this.worker=null;
                    this.fillTable();
                }
            }
        }
    }//GEN-LAST:event_jFormattedTextFieldSearchSurnameKeyReleased
protected void fillTable()
{
    String[] str=new String[4]; 
    DefaultTableModel table=(DefaultTableModel) this.jTableMusic.getModel();
    while(table.getRowCount()!=0)
    {
        table.removeRow(0);
    }
    boolean a=true;
    for(MusicalRecording v:this.music)
    {
        a=true;
        if(this.genre!=null)
        {
            if(v.getSong().getGenre().equalsIgnoreCase(this.genre)==false)
                a=false;
        }
        if(a==true&&this.worker!=null)
        {
            a=false;
            for(int i=0;i<v.getSong().sizeListPoets();i++)
            {
                if(v.getSong().getPoet(i).equalsMusicIndustryWorker(this.worker)==true)
                {
                    a=true;
                    break;
                }
            }
        }
        if(a==true)
        {
            str[0]=v.getSong().getName();
            if(new DateCompare().compare(v.getSong().getCreationDate(), "1.1.1")!=0)
                str[1]=v.getSong().getCreationDate();
            else
                str[1]=" ";
            if(new DateCompare().compare(v.getDateOfPerformance(), "1.1.1")!=0)
                str[2]=v.getDateOfPerformance();
            else
                str[2]=" ";
            str[3]=this.russificationGenre(v.getSong().getGenre());
            table.addRow(str);
        }
    }
}
protected String russificationGenre(String str)
{
    String s=null;
    if(str.equalsIgnoreCase(SongInformation.CLASSIC))
    {
        s="Классика";
    }
    else
    {
        if(str.equalsIgnoreCase(SongInformation.JAZZ))
        {
            s="Джаз";
        }
        else
        {
            if(str.equalsIgnoreCase(SongInformation.POP))
            {
                s="Поп";
            }
            else
                s="Рок";
        }
    }
    return s;
}
/**
 * @param args the command line arguments
 */
    @Override
public void paint(Graphics g)
{
    g.drawImage(this.picture, 0, 25, this);
    this.paint_1();
}
@Override
public void update(Graphics g)
{
    g.drawImage(this.picture, 0, 25,this);
    this.update_1();
    
}
public void paint_1()
{
    for(int i=0;i<this.getContentPane().getComponentCount();i++)
    {
        this.getContentPane().getComponent(i).repaint();
    }
}
public void update_1()
{
    for(int i=0;i<this.getContentPane().getComponentCount();i++)
    {
        this.getContentPane().getComponent(i).update(this.getContentPane().getComponent(i).getGraphics());
    }
}
protected ArrayList<MusicalRecording> music;//пременная хранящая объект кторый получен из родительской формы
protected Image picture;//заставка
protected JPopupMenu jPopupMenu1; 
protected String genre;//переменная хранящая выбранный жанр
protected MusicIndustryWorker worker;//переменная хранящая выбраного поэта
protected int oldIndexListPoets;//старое значение индекса
protected ArrayList<MusicIndustryWorker> listPoets;//список хранящий всех поэтов
protected ImageIcon pictureLabel;//картинка для надписи
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JComboBox jComboBoxGenre;
    private javax.swing.JFormattedTextField jFormattedTextFieldSearchName;
    private javax.swing.JFormattedTextField jFormattedTextFieldSearchSurname;
    private javax.swing.JLabel jLabelListMusicalRecording;
    private javax.swing.JLabel jLabelPoupMenu;
    private javax.swing.JLabel jLabelQuestion;
    private javax.swing.JList jListPoets;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableMusic;
    // End of variables declaration//GEN-END:variables
}
