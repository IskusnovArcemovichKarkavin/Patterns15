/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.*;
import components.pole;
import javax.swing.JOptionPane;

public class flyingPlanesForm extends javax.swing.JFrame {
    private ArrayList<basicPlane> flyingPlanes;
    private Vector<pole> textPlanes;
    private String[] colHeaders = new String[]{"Название", "Тип", "Масса", "Пункт отправления", "Пункт прибытия", "Остаток пути(остаток топлива)", "Характеристика"};
    public flyingPlanesForm(ArrayList <basicPlane> newFlyingPlanes) {
        super("Список самолетов в воздухе");
        flyingPlanes=newFlyingPlanes;
        initComponents();
    }
    
    public flyingPlanesForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButtonAll = new javax.swing.JButton();
        jButtonPasseng = new javax.swing.JButton();
        jButtonGood = new javax.swing.JButton();
        jButtonWar = new javax.swing.JButton();
        jButtonPleasure = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Заголовок 5", "Заголовок 6", "Заголовок 7"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Показать следующий тип самолетов:");

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Топлива осталось на");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("ходов");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Показать следующие типы самолетов");

        jButtonAll.setText("Все самолеты");
        jButtonAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAllActionPerformed(evt);
            }
        });

        jButtonPasseng.setText("Только пассажирские");
        jButtonPasseng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPassengActionPerformed(evt);
            }
        });

        jButtonGood.setText("Тоолько грузовые");
        jButtonGood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGoodActionPerformed(evt);
            }
        });

        jButtonWar.setText("Только военные");
        jButtonWar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWarActionPerformed(evt);
            }
        });

        jButtonPleasure.setText("Только прогулочные");
        jButtonPleasure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPleasureActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 738, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonAll)
                                        .addGap(27, 27, 27)
                                        .addComponent(jButtonPasseng)
                                        .addGap(30, 30, 30)
                                        .addComponent(jButtonGood))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(80, 80, 80)
                                        .addComponent(jButtonWar)
                                        .addGap(57, 57, 57)
                                        .addComponent(jButtonPleasure)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(50, 50, 50))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)))))))
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(97, 97, 97)
                    .addComponent(jLabel5)
                    .addContainerGap(470, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonAll)
                        .addComponent(jButtonPasseng)
                        .addComponent(jButtonGood))
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButtonPleasure)
                    .addComponent(jButtonWar))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(153, 153, 153)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(207, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1000, 0, 1000, 1));
        textPlanes = new Vector<pole>();
        String[] tekInfo = new String[colHeaders.length];
        for (basicPlane bp : flyingPlanes) {
            tekInfo[0]=bp.getName();
            tekInfo[2]=Integer.toString(bp.getWeight());
            tekInfo[3]=bp.getStartAirport();
            tekInfo[4]=bp.getFinishAirport();
            tekInfo[5]=Integer.toString(bp.getTekTime()) +" (" + Integer.toString(bp.getMaxTime()) + ")";
            String str=bp.getClass().toString();
            if("class passengerPlane".equals(str)) { 
                tekInfo[1]="Пассажирский";
                passengerPlane pp = (passengerPlane) bp;
                tekInfo[6]="Кол-во людей:" + pp.getColvoMen();
            }
            else if ("class goodsPlane".equals(str)) {
                tekInfo[1]="Грузовой";
                goodsPlane gp = (goodsPlane) bp;
                tekInfo[6]="Кол-во груза:" + gp.getColvoGoods();
            }
            else if ("class pleasurePlane".equals(str)) {
                tekInfo[1]="Прогулочный";
                tekInfo[6]="-";
            }
            else if ("class warPlane".equals(str)) {
                tekInfo[1]="Военный";
                tekInfo[6]="-";
            }
            textPlanes.add(new pole(tekInfo));
            }
        if (textPlanes.size()>0) jTable1.setModel(new ResultTableModel(colHeaders, textPlanes));
        else { 
            JOptionPane.showMessageDialog(null, "Самолетов в воздухе нет", "Отсутствие самолетов", JOptionPane.OK_OPTION);
            this.dispose();
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButtonAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAllActionPerformed
        int value=(int)jSpinner1.getValue();
        textPlanes = new Vector<pole>();
        String[] tekInfo = new String[colHeaders.length];
        for (basicPlane bp : flyingPlanes) {
            tekInfo[0]=bp.getName();
            tekInfo[2]=Integer.toString(bp.getWeight());
            tekInfo[3]=bp.getStartAirport();
            tekInfo[4]=bp.getFinishAirport();
            tekInfo[5]=Integer.toString(bp.getTekTime()) +" (" + Integer.toString(bp.getMaxTime()) + ")";
            String str=bp.getClass().toString();
            if("class passengerPlane".equals(str)) { 
                tekInfo[1]="Пассажирский";
                passengerPlane pp = (passengerPlane) bp;
                tekInfo[6]="Кол-во людей:" + pp.getColvoMen();
            }
            else if ("class goodsPlane".equals(str)) {
                tekInfo[1]="Грузовой";
                goodsPlane gp = (goodsPlane) bp;
                tekInfo[6]="Кол-во груза:" + gp.getColvoGoods();
            }
            else if ("class pleasurePlane".equals(str)) {
                tekInfo[1]="Прогулочный";
                tekInfo[6]="-";
            }
            else if ("class warPlane".equals(str)) {
                tekInfo[1]="Военный";
                tekInfo[6]="-";
            }
            if (bp.getMaxTime()<=value) textPlanes.add(new pole(tekInfo));
            }
        if (textPlanes.size()>0) jTable1.setModel(new ResultTableModel(colHeaders, textPlanes));
        else { 
            JOptionPane.showMessageDialog(null, "Летящие самолеты не удовлетворяют выбранным критериям", "Отсутствие самолетов", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_jButtonAllActionPerformed

    private void jButtonPassengActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPassengActionPerformed
        int value=(int)jSpinner1.getValue();
        textPlanes = new Vector<pole>();
        String[] tekInfo = new String[colHeaders.length];
        for (basicPlane bp : flyingPlanes) {
            if("class passengerPlane".equals(bp.getClass().toString()) && bp.getMaxTime()<=value) {
                tekInfo[0]=bp.getName();
                tekInfo[2]=Integer.toString(bp.getWeight());
                tekInfo[3]=bp.getStartAirport();
                tekInfo[4]=bp.getFinishAirport();
                tekInfo[5]=Integer.toString(bp.getTekTime()) +" (" + Integer.toString(bp.getMaxTime()) + ")";
                tekInfo[1]="Пассажирский";
                passengerPlane pp = (passengerPlane) bp;
                tekInfo[6]="Кол-во людей:" + pp.getColvoMen();
                textPlanes.add(new pole(tekInfo));
            }
        }
        if (textPlanes.size()>0) jTable1.setModel(new ResultTableModel(colHeaders, textPlanes));
        else JOptionPane.showMessageDialog(null, "Летящие самолеты не удовлетворяют выбранным критериям", "Отсутствие самолетов", JOptionPane.OK_OPTION);
    }//GEN-LAST:event_jButtonPassengActionPerformed

    private void jButtonGoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGoodActionPerformed
        int value=(int)jSpinner1.getValue();
        textPlanes = new Vector<pole>();
        String[] tekInfo = new String[colHeaders.length];
        for (basicPlane bp : flyingPlanes) {
            if("class goodsPlane".equals(bp.getClass().toString()) && bp.getMaxTime()<=value) {
                tekInfo[0]=bp.getName();
                tekInfo[2]=Integer.toString(bp.getWeight());
                tekInfo[3]=bp.getStartAirport();
                tekInfo[4]=bp.getFinishAirport();
                tekInfo[5]=Integer.toString(bp.getTekTime()) +" (" + Integer.toString(bp.getMaxTime()) + ")";
                tekInfo[1]="Грузовой";
                goodsPlane gp = (goodsPlane) bp;
                tekInfo[6]="Кол-во груза:" + gp.getColvoGoods();
                textPlanes.add(new pole(tekInfo));
            }
        }
        if (textPlanes.size()>0) jTable1.setModel(new ResultTableModel(colHeaders, textPlanes));
        else JOptionPane.showMessageDialog(null, "Летящие самолеты не удовлетворяют выбранным критериям", "Отсутствие самолетов", JOptionPane.OK_OPTION);
    }//GEN-LAST:event_jButtonGoodActionPerformed

    private void jButtonWarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonWarActionPerformed
        int value=(int)jSpinner1.getValue();
        textPlanes = new Vector<pole>();
        String[] tekInfo = new String[colHeaders.length];
        for (basicPlane bp : flyingPlanes) {
            if("class warPlane".equals(bp.getClass().toString()) && bp.getMaxTime()<=value) {
                tekInfo[0]=bp.getName();
                tekInfo[2]=Integer.toString(bp.getWeight());
                tekInfo[3]=bp.getStartAirport();
                tekInfo[4]=bp.getFinishAirport();
                tekInfo[5]=Integer.toString(bp.getTekTime()) +" (" + Integer.toString(bp.getMaxTime()) + ")";
                tekInfo[1]="Военный";
                tekInfo[6]="-";
                textPlanes.add(new pole(tekInfo));
            }
        }
        if (textPlanes.size()>0) jTable1.setModel(new ResultTableModel(colHeaders, textPlanes));
        else JOptionPane.showMessageDialog(null, "Летящие самолеты не удовлетворяют выбранным критериям", "Отсутствие самолетов", JOptionPane.OK_OPTION);
    }//GEN-LAST:event_jButtonWarActionPerformed

    private void jButtonPleasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPleasureActionPerformed
        int value=(int)jSpinner1.getValue();
        textPlanes = new Vector<pole>();
        String[] tekInfo = new String[colHeaders.length];
        for (basicPlane bp : flyingPlanes) {
            if("class pleasurePlane".equals(bp.getClass().toString()) && bp.getMaxTime()<=value) {
                tekInfo[0]=bp.getName();
                tekInfo[2]=Integer.toString(bp.getWeight());
                tekInfo[3]=bp.getStartAirport();
                tekInfo[4]=bp.getFinishAirport();
                tekInfo[5]=Integer.toString(bp.getTekTime()) +" (" + Integer.toString(bp.getMaxTime()) + ")";
                tekInfo[1]="Прогулочный";
                tekInfo[6]="-";
                textPlanes.add(new pole(tekInfo));
            }
        }
        if (textPlanes.size()>0) jTable1.setModel(new ResultTableModel(colHeaders, textPlanes));
        else JOptionPane.showMessageDialog(null, "Летящие самолеты не удовлетворяют выбранным критериям", "Отсутствие самолетов", JOptionPane.OK_OPTION);
    }//GEN-LAST:event_jButtonPleasureActionPerformed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        if ((int)jSpinner1.getValue()<0) jSpinner1.setValue(0);
        else
            if ((int)jSpinner1.getValue()>1000) jSpinner1.setValue(1000);
    }//GEN-LAST:event_jSpinner1StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[], ArrayList flyingPlanes) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(flyingPlanesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(flyingPlanesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(flyingPlanesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(flyingPlanesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run(ArrayList flyingPlanes) {
                new flyingPlanesForm(flyingPlanes).setVisible(true);
            }
            public void run() {
                new flyingPlanesForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAll;
    private javax.swing.JButton jButtonGood;
    private javax.swing.JButton jButtonPasseng;
    private javax.swing.JButton jButtonPleasure;
    private javax.swing.JButton jButtonWar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
