
import components.pole;
import java.util.Vector;
import java.util.Random;
import java.awt.*;
import java.awt.event.*;
import java.util.Collections;
import javax.swing.*;
import javax.swing.table.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
public class networkForm extends javax.swing.JFrame {
    public Vector<airport> airports;
    public java.util.ArrayList<basicPlane> flyingPlanes; 
    public String[] columnHeaders;
    public static int maxNumberAirports=airport.getMaxAirportNumber();
    public int numberAirports;
    public int crashesNumber, deadMenNumber, lostGoodsNumber;
    public int  menInAir, goodInAir;
    private int chod=0;
    private boolean enabled;
    public javax.swing.Timer process = new javax.swing.Timer(1000,new ActionListener() {
        public void actionPerformed(ActionEvent ev) {
            step();
        }
    });
    /**
     * Creates new form networkForm
     */
    public networkForm() {
        super("Сеть Аэропортов");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButtonExit = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jButtonExit.setText("Выход из сети");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Запустить работу");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Стартовый ход");

        jMenu1.setText("Файл");

        jMenuItem2.setText("Выход из сети");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Справка");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setText("О программе");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jToggleButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonExit)
                                .addGap(21, 21, 21))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jToggleButton1)
                            .addComponent(jButtonExit)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fillTable () {
        String[] colHeaders=new String[]{"Общая информация", "Количество"};
        Vector<pole> generalInfo = new Vector<pole>();
        generalInfo.add(new pole(new String[]{"Количество крушений", Integer.toString(crashesNumber)}));
        generalInfo.add(new pole(new String[]{"Количество погибший пассажиров", Integer.toString(deadMenNumber)}));
        generalInfo.add(new pole(new String[]{"Количество потерянного груза", Integer.toString(lostGoodsNumber)}));
        generalInfo.add(new pole(new String[]{"Количество самолетов в воздухе", Integer.toString(flyingPlanes.size())}));
        generalInfo.add(new pole(new String[]{"Количество людей в воздухе", Integer.toString(menInAir)}));
        generalInfo.add(new pole(new String[]{"Количество груза в воздухе", Integer.toString(goodInAir)}));
        jTable1.setModel(new ResultTableModel(colHeaders, generalInfo));
    }
    
    public void step () {
        try {
        if (jToggleButton1.isSelected()) {
            jLabel1.setText("Ход №" + Integer.toString(chod));
            chod++;
            //освободить все взлетно-посадочные полосы
            for (airport air: airports) {
                air.setRunwayStatus(0);
            }
            //отсортировать все летящие самолеты по возрастанию расстояния до пункта прибытия
            planesCompare corporator=new planesCompare();
            Collections.sort(flyingPlanes, corporator);
            for (airport air: airports) {
                corporator.planesVectorCompararion(air.getFlyingPlanes());
                int planesNumber=air.getFlyingPlanes().size();
                for (int i=0; i<planesNumber; i++) {
                    basicPlane bp=air.getFlyingPlanes().get(i);
                    //уменьшить время полета до пункта прибытия и максимального количества времени в воздухе
                    if (bp.getTekTime()>0) {
                        bp.setTekTime(bp.getTekTime()-1);
                    }
                    bp.setMaxTime(bp.getMaxTime()-1);
                    //если максимальное кол-во времени в воздухе равно -1 или произошло непредвиденное событие, то самолет разбился
                    //шанс непредвиденного события 1:150
                    if (bp.getMaxTime()==-1 || new Random().nextInt(150)==0) {
                        //увеличить количество крушений, и погибших людей, и потерянного груза
                        crashesNumber++;
                        if("class passengerPlane".equals(bp.getClass().toString())) {
                            passengerPlane pp=(passengerPlane)bp;
                            deadMenNumber+=pp.getColvoMen();
                            menInAir-=pp.getColvoMen();
                        }
                        else
                            if ("class goodsPlane".equals(bp.getClass().toString())) {
                                goodsPlane gp=(goodsPlane)bp;
                                lostGoodsNumber+=gp.getColvoGoods();
                                goodInAir-=gp.getColvoGoods();
                            }
                        flyingPlanes.remove(bp);
                        try {
                        air.getFlyingPlanes().remove(bp);
                        }
                        catch (ArrayIndexOutOfBoundsException e) {
                                JOptionPane.showMessageDialog(null, "Выход за границы массива в аэропорте " + air.getAirportsName(), "Ошибка", JOptionPane.OK_OPTION);
                                }
                        i--;
                        planesNumber--;
                        bp=null;
                        continue;
                    }
                    //если самолет не разбился и время полета до аэропорта назначения равно 0
                    if (bp!=null && bp.getTekTime()==0) {
                        //если взлетно-посадочная полоса не занята и есть свободные места для парковки
                        // то самолет успешно приземлился и взлетно-посадочная полоса занята
                        if (air.getRunwayStatus()==0 && air.getParkingPlanes().size()<air.getParkingPlacesNumber()) {
                            flyingPlanes.remove(bp);
                            bp.setStopTime(new Random().nextInt(8)+2);
                            bp.setStartAirport(null);
                            bp.setFinishAirport(null);
                            air.getParkingPlanes().add(bp);
                            air.getFlyingPlanes().remove(bp);
                            air.setRunwayStatus(1);
                            if("class passengerPlane".equals(bp.getClass().toString())) {
                                passengerPlane pp=(passengerPlane)bp;
                                menInAir-=pp.getColvoMen();
                            }
                            else
                                if ("class goodsPlane".equals(bp.getClass().toString())) {
                                    goodsPlane gp=(goodsPlane)bp;
                                    goodInAir-=gp.getColvoGoods();
                                }
                            i--;
                            planesNumber--;
                        }
                    }
                }
            }
            //если взлетно-посадочная полоса свободна, то отправляем самолет
            for (airport air: airports) {
                if (air.getParkingPlanes().isEmpty()==false) {
                    basicPlane startingPlane=null;
                    for (basicPlane bp: air.getParkingPlanes()) {
                        if (bp.getStopTime()==0) {
                            startingPlane=bp;
                            break;
                        }
                    }
                    for (basicPlane bp: air.getParkingPlanes()) {
                        if (bp.getStopTime()>0)
                            bp.setStopTime(bp.getStopTime()-1);
                    }
                    //если есть хотя бы самолет с временем стоянки=0, то оправляем его
                    if (startingPlane!=null && air.getRunwayStatus()==0) {
                        int arrivePoint; boolean start;
                        do {
                            arrivePoint=new Random().nextInt(airports.size());
                            if (airports.get(arrivePoint).getAirportType()==0 || "class warPlane".equals(startingPlane.getClass().toString()))
                                start=true;
                            else start=false;
                        }
                        while (start==false || airports.get(arrivePoint)==air);
                        int xStart=air.getCoordX(), yStart=air.getCoordY();
                        int xFinish=airports.get(arrivePoint).getCoordX(), yFinish=airports.get(arrivePoint).getCoordY();
                        int dx=Math.abs(xFinish-xStart), dy=Math.abs(yFinish-yStart);
                        int path=(int)Math.sqrt(dx*dx+dy*dy);
                        int curSpeed=startingPlane.getSpeed()/100;
                        startingPlane.setMaxTime(5+path/curSpeed);
                        startingPlane.setTekTime((5+path/curSpeed)/2);
                        startingPlane.setStartAirport(air.getAirportsName());
                        startingPlane.setFinishAirport(airports.get(arrivePoint).getAirportsName());
                        airports.get(arrivePoint).getFlyingPlanes().add(startingPlane);
                        flyingPlanes.add(startingPlane);
                        air.getParkingPlanes().remove(startingPlane);
                        air.setRunwayStatus(1);
                        if("class passengerPlane".equals(startingPlane.getClass().toString())) {
                            passengerPlane pp=(passengerPlane)startingPlane;
                            pp.setColvoMen(new Random().nextInt(pp.getMaxColvoMen()-10)+10);
                            menInAir+=pp.getColvoMen();
                        }
                        else
                            if ("class goodsPlane".equals(startingPlane.getClass().toString())) {
                                goodsPlane gp=(goodsPlane)startingPlane;
                                gp.setColvoGoods(new Random().nextInt(gp.getMaxColvoGoods()-1000)+1000);
                                goodInAir+=gp.getColvoGoods();
                            }
                    }
                }
            }
            fillTable();
        }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString(), "Ошибка", JOptionPane.OK_OPTION);
            process.stop();
            //System.exit(-1);
        }
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        chod=1; enabled=true;
        crashesNumber=0; deadMenNumber=0; lostGoodsNumber=0;
        menInAir=0; goodInAir=0;
        airports = new Vector<airport>();
        columnHeaders = new String[4];
        Random rand = new Random();
        numberAirports = rand.nextInt(maxNumberAirports-2)+2;
        //составление массивов координат аэропортов так, чтоба они не пересекались
        //и появление аэропортов
        int []coordX = new int[numberAirports];
        int []coordY = new int[numberAirports];
        for (int i=0; i<numberAirports; i++) {
            boolean ok=true;
            int xi, yi;
            while (ok) {
                xi=rand.nextInt(100);
                yi=rand.nextInt(100);
                for (int j=0; j<i; j++) {
                    if (coordX[j]==xi && coordY[j]==yi) {
                        ok=false;
                        break;
                    }
                }
                if (ok) {
                    coordX[i]=xi;
                    coordY[i]=yi;
                    airports.add(new airport(xi, yi));
                    break;
                }
            }
        }
        String[] items = new String[numberAirports+1];
        items[0]="Список самолетов в воздухе\n";
        for (int i=0; i<numberAirports; i++) {
            items[i+1]=airports.get(i).getAirportsName() +"\n";
        }
        jList1.setListData(items);
        flyingPlanes = new java.util.ArrayList<basicPlane>();
        process.start();
        fillTable();
    }//GEN-LAST:event_formWindowOpened

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (enabled==true) {
            int number=jList1.getSelectedIndex();
            if (number==0) new flyingPlanesForm(flyingPlanes).setVisible(true);
            else new airportForm(airports.get(number-1)).setVisible(true);
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        UIManager.put("OptionPane.yesButtonText", "Да");
        UIManager.put("OptionPane.noButtonText", "Нет");
        int answer = JOptionPane.showConfirmDialog(null, "Вы уверены, что хотите выйти из программы?", "Выход", JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jButtonExitActionPerformed
    
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (jToggleButton1.isSelected()) {
            jList1.setEnabled(false);
            enabled=false;
            jToggleButton1.setText("Остановить");
        }
        else { 
            jToggleButton1.setText("Запустить");
            enabled=true;
            jList1.setEnabled(true);
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        airport.setNumber(0);
    }//GEN-LAST:event_formWindowClosed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        UIManager.put("OptionPane.yesButtonText", "Да");
        UIManager.put("OptionPane.noButtonText", "Нет");
        int answer = JOptionPane.showConfirmDialog(null, "Вы уверены, что хотите выйти из программы?", "Выход", JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new infoForm().setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(networkForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(networkForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(networkForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(networkForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new networkForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}

class ResultTableModel extends AbstractTableModel{
    protected Vector<pole> data;
    protected String[] colNames;
    public ResultTableModel (String[] colHeaders, Vector<pole> vp){
        super();
        data = vp;
        colNames = new String[colHeaders.length];
        for (int i=0; i<colHeaders.length; i++)
            colNames[i]=colHeaders[i];
    }
    public int getRowCount () {
        return data.size();
    }
    public int getColumnCount () {
        return data.get(0).column.length;
    }
    public Object getValueAt (int row, int column) {
        return data.get(row).column[column];
    }
    public String getColumnName(int col) {
        return colNames[col];
    }
    public Class getColumnClass (int col) {
        return data.get(0).column[col].getClass();
    }    
}
class planesCompare implements java.util.Comparator {
    public int compare (Object ob1, Object ob2) {
        try {
            basicPlane bp1, bp2;
            bp1=(basicPlane)ob1;
            bp2=(basicPlane)ob2;
            if (bp1.getMaxTime()>bp2.getMaxTime()) return -1;
            if (bp1.getMaxTime()<bp2.getMaxTime()) return 1;
            passengerPlane pp1, pp2;
            if("class passengerPlane".equals(bp1.getClass().toString())) {
                pp1=(passengerPlane)bp1;
            }
            else pp1=null;
            if("class passengerPlane".equals(bp2.getClass().toString())) {
                pp2=(passengerPlane)bp2;
            }
            else pp2=null;
            if (pp1==null && pp2!=null) return -1;
            return 1;
        } catch (Exception e) {}
        finally {
            return 1;}
    }
    public void planesVectorCompararion(Vector<basicPlane> vbp) {
        int size=vbp.size();
        for (int i=0; i<size-1; i++)
            for (int j=0; j<size-i-1; j++) {
                if (compare((Object)vbp.get(i),(Object)vbp.get(j))==-1) {
                    basicPlane bp=vbp.get(i);
                    vbp.set(i, vbp.get(j));
                    vbp.set(j, bp);
                }
            }
    }
}